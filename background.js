let kotlin1 = [
	{
		id: 1,
		title: "Q1. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.subList(1, 3)) <br> }",
		choices: ["1. [1, 2, 3]", "2. [1, 2]", "3. [2, 3]", "4. [2, 3, 4]"],
		answer: "3. [2, 3]",
	},
	{
		id: 2,
		title: "Q2. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x.rangeTo(y)) <br> }",
		choices: ["1. 10..20", "2. 10..19", "3. 11..20", "4. 11..19"],
		answer: "1. 10..20",
	},
	{
		id: 3,
		title: "Q3. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.filter { it % 2 == 0 }) <br> }",
		choices: [
			"1. [1, 2, 3, 4, 5]",
			"2. [2, 4]",
			"3. [1, 3, 5]",
			"4. [2, 3, 4]",
		],
		answer: "2. [2, 4]",
	},
	{
		id: 4,
		title: "Q4. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x..y step 2) <br> }",
		choices: [
			"1. 10, 12, 14, 16, 18, 20",
			"2. 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20",
			"3. 10, 12, 14, 16, 18",
			"4. 10, 11, 12, 13, 14, 15, 16, 17, 18, 19",
		],
		answer: "1. 10, 12, 14, 16, 18, 20",
	},
	{
		id: 5,
		title: "Q5. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.map { it * 2 }) <br> }",
		choices: [
			"1. [1, 2, 3, 4, 5]",
			"2. [2, 4, 6, 8, 10]",
			"3. [1, 3, 5]",
			"4. [2, 3, 4]",
		],
		answer: "2. [2, 4, 6, 8, 10]",
	},
	{
		id: 6,
		title: "Q6. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.reduce { acc, next -> acc + next }) <br> }",
		choices: ["1. 15", "2. 10", "3. 5", "4. 0"],
		answer: "1. 15",
	},
	{
		id: 7,
		title: "Q7. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.fold(0) { acc, next -> acc + next }) <br> }",
		choices: ["1. 15", "2. 10", "3. 5", "4. 0"],
		answer: "1. 15",
	},
	{
		id: 8,
		title: "Q8. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x until y) <br> }",
		choices: ["1. 10..20", "2. 10..19", "3. 11..20", "4. 11..19"],
		answer: "2. 10..19",
	},
	{
		id: 9,
		title: "Q9. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.any { it % 2 == 0 }) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "1. true",
	},
	{
		id: 10,
		title: "Q10. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.all { it % 2 == 0 }) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "2. false",
	},
	{
		id: 11,
		title: "Q11. Which of the following is a valid way to declare a nullable string in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. String? name",
			"2. String name?",
			"3. nullable String name",
			"4. String name = null",
		],
		answer: "1. String? name",
	},
	{
		id: 12,
		title: "Q12. What is the purpose of the !! operator in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It checks if a value is null and throws an exception if it is.",
			"2. It checks if a value is not null and throws an exception if it is not.",
			"3. It converts a nullable value to a non-nullable value.",
			"4. It is used to declare a nullable variable.",
		],
		answer: "1. It checks if a value is null and throws an exception if it is.",
	},
	{
		id: 13,
		title: "Q13. What is the purpose of the ? operator in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It checks if a value is null and throws an exception if it is.",
			"2. It checks if a value is not null and throws an exception if it is not.",
			"3. It converts a nullable value to a non-nullable value.",
			"4. It is used to declare a nullable variable.",
		],
		answer: "3. It converts a nullable value to a non-nullable value.",
	},
	{
		id: 14,
		title: "Q14. What is the difference between `val` and `var` in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. `val` is for mutable variables, `var` is for immutable variables.",
			"2. `val` is for immutable variables, `var` is for mutable variables.",
			"3. `val` is for constant variables, `var` is for variables that can be changed.",
			"4. There is no difference.",
		],
		answer: "2. `val` is for immutable variables, `var` is for mutable variables.",
	},
	{
		id: 15,
		title: "Q15. What is the purpose of the `data` keyword in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to declare a data class.",
			"2. It is used to declare a mutable variable.",
			"3. It is used to declare an immutable variable.",
			"4. It is used to declare a function.",
		],
		answer: "1. It is used to declare a data class.",
	},
	{
		id: 16,
		title: "Q16. What is the output of this Jetpack Compose code?",
		text: undefined,
		code2: '@Composable fun Greeting(name: String) { <br> Text(text = "Hello, $name!") <br> }',
		choices: [
			"1. Hello, ",
			"2. Hello, $name!",
			"3. Hello, [name]",
			"4. Error",
		],
		answer: "2. Hello, $name!",
	},
	{
		id: 17,
		title: "Q17. What is the purpose of the `@Composable` annotation in Jetpack Compose?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to declare a composable function.",
			"2. It is used to declare a mutable variable.",
			"3. It is used to declare an immutable variable.",
			"4. It is used to declare a class.",
		],
		answer: "1. It is used to declare a composable function.",
	},

	{
		id: 19,
		title: "Q19. How do you handle permissions in an Android app using Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. Use the `requestPermissions` method of the `Context` class.",
			"2. Use the `checkSelfPermission` method of the `Activity` class.",
			"3. Use the `ContextCompat.checkSelfPermission` method and `ActivityCompat.requestPermissions` methods.",
			"4. Use the `PermissionManager` class.",
		],
		answer: "3. Use the `ContextCompat.checkSelfPermission` method and `ActivityCompat.requestPermissions` methods.",
	},
	{
		id: 20,
		title: "Q20. Which of the following is a valid way to start an activity in an Android app using Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. `startActivity(Intent(this, SecondActivity::class.java))`",
			"2. `start(SecondActivity::class.java)`",
			"3. `launchActivity(SecondActivity::class.java)`",
			"4. `openActivity(SecondActivity::class.java)`",
		],
		answer: "1. `startActivity(Intent(this, SecondActivity::class.java))`",
	},
	{
		id: 21,
		title: "Q21. How do you navigate between screens in Jetpack Compose?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. Use the `Navigation` class.",
			"2. Use the `startActivity` method.",
			"3. Use the `NavController` class.",
			"4. Use the `FragmentManager` class.",
		],
		answer: "3. Use the `NavController` class.",
	},
	{
		id: 22,
		title: "Q22. What is the purpose of the `ViewModel` class in Android?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To hold and manage UI state.",
			"2. To handle background tasks.",
			"3. To manage database operations.",
			"4. To handle network requests.",
		],
		answer: "1. To hold and manage UI state.",
	},
	{
		id: 23,
		title: "Q23. What is the purpose of the `Flow` class in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to represent a sequence of values that can be emitted over time.",
			"2. It is used to perform asynchronous operations.",
			"3. It is used to manage UI state.",
			"4. It is used to handle database operations.",
		],
		answer: "1. It is used to represent a sequence of values that can be emitted over time.",
	},
	{
		id: 24,
		title: "Q24. What is the purpose of the `Room` persistence library in Android?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To handle background tasks.",
			"2. To manage UI state.",
			"3. To provide an abstraction layer for SQLite.",
			"4. To handle network requests.",
		],
		answer: "3. To provide an abstraction layer for SQLite.",
	},
	{
		id: 25,
		title: "Q25. How do you set up accessibility in an Android app?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. By using the `AccessibilityService` class.",
			"2. By using the `AccessibilityManager` class.",
			"3. By using the `AccessibilityNodeInfo` class.",
			"4. All of the above.",
		],
		answer: "4. All of the above.",
	},
	{
		id: 26,
		title: "Q26. What is the purpose of the `DeviceAdmin` feature in Android?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To manage system settings and policies.",
			"2. To access user data.",
			"3. To control hardware components.",
			"4. To perform background tasks.",
		],
		answer: "1. To manage system settings and policies.",
	},
	{
		id: 27,
		title: "Q27. How do you set up a `DeviceAdmin` in an Android app?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. By using the `DevicePolicyManager` class.",
			"2. By using the `DeviceAdminReceiver` class.",
			"3. By using the `DeviceAdminService` class.",
			"4. All of the above.",
		],
		answer: "4. All of the above.",
	},
	{
		id: 28,
		title: "Q28. What is the purpose of the `AlarmManager` class in Android?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To schedule tasks to run at specific times.",
			"2. To manage background tasks.",
			"3. To handle network requests.",
			"4. To provide an abstraction layer for SQLite.",
		],
		answer: "1. To schedule tasks to run at specific times.",
	},
	{
		id: 29,
		title: "Q29. What is the purpose of the `ServiceManager` class in Android?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To manage background tasks.",
			"2. To handle network requests.",
			"3. To provide an abstraction layer for SQLite.",
			"4. To manage system services.",
		],
		answer: "4. To manage system services.",
	},
	{
		id: 30,
		title: "Q30. How do you create a background service in an Android app using Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. By extending the `Service` class.",
			"2. By using the `Job` class.",
			"3. By using the `CoroutineScope` class.",
			"4. All of the above.",
		],
		answer: "1. By extending the `Service` class.",
	},
	{
		id: 31,
		title: "Q31. What is the purpose of the `BroadcastReceiver` class in Android?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To receive system broadcasts.",
			"2. To send system broadcasts.",
			"3. To handle network requests.",
			"4. To provide an abstraction layer for SQLite.",
		],
		answer: "1. To receive system broadcasts.",
	},
	{
		id: 32,
		title: "Q32. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val name: String? = null <br> println(name?.length) <br> }",
		choices: ["1. 0", "2. null", "3. Error", "4. 1"],
		answer: "2. null",
	},
	{
		id: 33,
		title: "Q33. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.take(2)) <br> }",
		choices: ["1. [1, 2, 3]", "2. [1, 2]", "3. [2, 3]", "4. [2, 3, 4]"],
		answer: "2. [1, 2]",
	},
	{
		id: 34,
		title: "Q34. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.drop(2)) <br> }",
		choices: ["1. [1, 2, 3]", "2. [1, 2]", "3. [3, 4, 5]", "4. [4, 5]"],
		answer: "3. [3, 4, 5]",
	},
	{
		id: 35,
		title: "Q35. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.takeLast(2)) <br> }",
		choices: ["1. [1, 2]", "2. [3, 4]", "3. [4, 5]", "4. [3, 4, 5]"],
		answer: "3. [4, 5]",
	},
	{
		id: 36,
		title: "Q36. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.dropLast(2)) <br> }",
		choices: ["1. [1, 2]", "2. [3, 4]", "3. [1, 2, 3]", "4. [1, 2, 3, 4]"],
		answer: "4. [1, 2, 3, 4]",
	},
	{
		id: 37,
		title: "Q37. How do you create a new `CoroutineScope` in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. `CoroutineScope(Dispatchers.IO)`",
			"2. `CoroutineScope()`",
			"3. `CoroutineScope(Dispatchers.Main)`",
			"4. `CoroutineScope(Dispatchers.Default)`",
		],
		answer: "1. `CoroutineScope(Dispatchers.IO)`",
	},
	{
		id: 38,
		title: "Q38. What is the purpose of the `Dispatchers.IO` coroutine dispatcher?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to run coroutines on the main thread.",
			"2. It is used to run coroutines on a background thread.",
			"3. It is used to run coroutines on a thread pool.",
			"4. It is used to run coroutines on a specific thread.",
		],
		answer: "2. It is used to run coroutines on a background thread.",
	},
	{
		id: 39,
		title: "Q39. What is the purpose of the `Dispatchers.Main` coroutine dispatcher?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to run coroutines on the main thread.",
			"2. It is used to run coroutines on a background thread.",
			"3. It is used to run coroutines on a thread pool.",
			"4. It is used to run coroutines on a specific thread.",
		],
		answer: "1. It is used to run coroutines on the main thread.",
	},
	{
		id: 40,
		title: "Q40. What is the purpose of the `Dispatchers.Default` coroutine dispatcher?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to run coroutines on the main thread.",
			"2. It is used to run coroutines on a background thread.",
			"3. It is used to run coroutines on a thread pool.",
			"4. It is used to run coroutines on a specific thread.",
		],
		answer: "3. It is used to run coroutines on a thread pool.",
	},
	{
		id: 41,
		title: "Q41. Which of the following is a valid way to create a `Flow` in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. `flow { emit(1) }`",
			"2. `Flow(1)`",
			"3. `flow(1)`",
			"4. `Flow.create { emit(1) }`",
		],
		answer: "1. `flow { emit(1) }`",
	},
	{
		id: 42,
		title: "Q42. How do you collect a `Flow` in Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. `flow.collect { println(it) }`",
			"2. `flow.listen { println(it) }`",
			"3. `flow.subscribe { println(it) }`",
			"4. `flow.observe { println(it) }`",
		],
		answer: "1. `flow.collect { println(it) }`",
	},
	{
		id: 43,
		title: "Q43. What is the purpose of the `launch` function in Kotlin coroutines?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. It is used to launch a new coroutine.",
			"2. It is used to collect a `Flow`.",
			"3. It is used to create a `CoroutineScope`.",
			"4. It is used to manage UI state.",
		],
		answer: "1. It is used to launch a new coroutine.",
	},
	{
		id: 44,
		title: "Q44. How do you create a `Room` database in an Android app using Kotlin?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. By using the `Room.databaseBuilder` method.",
			"2. By using the `SQLiteOpenHelper` class.",
			"3. By using the `ContentProvider` class.",
			"4. By using the `SharedPreferences` class.",
		],
		answer: "1. By using the `Room.databaseBuilder` method.",
	},
	{
		id: 45,
		title: "Q45. How do you define an entity in `Room`?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. By using the `@Entity` annotation.",
			"2. By using the `@Table` annotation.",
			"3. By using the `@Database` annotation.",
			"4. By using the `@Dao` annotation.",
		],
		answer: "1. By using the `@Entity` annotation.",
	},
	{
		id: 46,
		title: "Q46. What is the purpose of a `DAO` in `Room`?",
		text: undefined,
		code2: "  ",
		choices: [
			"1. To define the database schema.",
			"2. To define data access methods.",
			"3. To manage database transactions.",
			"4. All of the above.",
		],
		answer: "2. To define data access methods.",
	},
	{
		id: 47,
		title: "Q47. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x > y) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "2. false",
	},
	{
		id: 48,
		title: "Q48. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x < y) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "1. true",
	},
	{
		id: 49,
		title: "Q49. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x == y) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "2. false",
	},
	{
		id: 50,
		title: "Q50. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x != y) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "1. true",
	},
	{
		id: 51,
		title: "Q51. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x >= y) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "2. false",
	},
	{
		id: 52,
		title: "Q52. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x <= y) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "1. true",
	},
	{
		id: 53,
		title: "Q53. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x + y) <br> }",
		choices: ["1. 10", "2. 20", "3. 30", "4. 1020"],
		answer: "3. 30",
	},
	{
		id: 54,
		title: "Q54. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x - y) <br> }",
		choices: ["1. 10", "2. 20", "3. 30", "4. -10"],
		answer: "4. -10",
	},
	{
		id: 55,
		title: "Q55. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x * y) <br> }",
		choices: ["1. 10", "2. 20", "3. 200", "4. 1020"],
		answer: "3. 200",
	},
	{
		id: 56,
		title: "Q56. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x / y) <br> }",
		choices: ["1. 1", "2. 2", "3. 0.5", "4. 10"],
		answer: "3. 0.5",
	},
	{
		id: 57,
		title: "Q57. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x % y) <br> }",
		choices: ["1. 10", "2. 20", "3. 0", "4. 10"],
		answer: "1. 10",
	},
	{
		id: 58,
		title: "Q58. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> println(x.toString()) <br> }",
		choices: ["1. 10", '2. "10"', "3. 10.0", '4. "10.0"'],
		answer: '2. "10"',
	},
	{
		id: 59,
		title: "Q59. What is the output of this code?",
		text: undefined,
		code2: 'fun main() { <br> val x = "10" <br> println(x.toInt()) <br> }',
		choices: ['1. "10"', "2. 10.0", "3. 10", "4. Error"],
		answer: "3. 10",
	},
	{
		id: 60,
		title: "Q60. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> println(x.toDouble()) <br> }",
		choices: ["1. 10.0", "2. 10", '3. "10.0"', '4. "10"'],
		answer: "1. 10.0",
	},
	{
		id: 61,
		title: "Q61. What is the output of this code?",
		text: undefined,
		code2: 'fun main() { <br> val x = "10.0" <br> println(x.toFloat()) <br> }',
		choices: ["1. 10.0", "2. 10", '3. "10.0"', '4. "10"'],
		answer: "1. 10.0",
	},
	{
		id: 62,
		title: "Q62. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x == 10 && y == 20) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "1. true",
	},
	{
		id: 63,
		title: "Q63. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x == 10 || y == 30) <br> }",
		choices: ["1. true", "2. false", "3. null", "4. 0"],
		answer: "1. true",
	},
];

let kotlin2 = [
	{
		id: 1,
		title: "Q1. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val list = listOf(1, 2, 3, 4, 5) <br> println(list.subList(1, 3)) <br> }",
		choices: ["1. [1, 2, 3]", "2. [1, 2]", "3. [2, 3]", "4. [2, 3, 4]"],
		answer: "3. [2, 3]",
	},
	{
		id: 2,
		title: "Q2. What is the output of this code?",
		text: undefined,
		code2: "fun main() { <br> val x = 10 <br> val y = 20 <br> println(x.rangeTo(y)) <br> }",
		choices: ["1. 10..20", "2. 10..19", "3. 11..20", "4. 11..19"],
		answer: "1. 10..20",
	},
	{
		id: 3,
		title: "Q3. You would like to print each score on its own line with its cardinal position. Without using **var** or **val**, which method allows iteration with both the value and its position?",
		text: undefined,
		code2: "fun main() { <br> val highScores = listOf(4000, 2000, 10200, 12000, 9030) <br> }",
		choices: [
			"1. `.withIndex()`",
			"2. `.forEachIndexed()`",
			"3. `.forEach()`",
			"4. `.forIndexes()`",
		],
		answer: "1. `.withIndex()`",
	},
	{
		id: 4,
		title: "Q4. When the **Airplane** class is instantiated, it displays **Aircraft = null**, not **Aircraft = C130** why?",
		text: undefined,
		code2: 'abstract class Aircraft { <br> init { println("Aircraft = ${getName()}") } <br> abstract fun getName(): String <br> } <br> class Airplane(private val name: String) : Aircraft() { <br> override fun getName(): String = name <br> }',
		choices: [
			"1. Classes are initialized in the same order they are in the file, therefore, Aircraft should appear after Airplane",
			"2. The code needs to pass the parameter to the base class's primary constructor. Since it does not, it receives a null",
			"3. Abstract function always returns null",
			"4. A superclass is initialized before its subclass. Therefore, name has not been set before it is rendered",
		],
		answer: "4. A superclass is initialized before its subclass. Therefore, name has not been set before it is rendered",
	},
	{
		id: 5,
		title: "Q5. Kotlin interfaces and abstract classes are very similar. What is one thing abstract class can do that interfaces cannot?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. Only abstract classes are inheritable by subclasses",
			"2. Only abstract classes can inherit from multiple superclasses",
			"3. Only abstract classes can have abstract methods",
			"4. Only abstract classes can store state",
		],
		answer: "4. Only abstract classes can store state",
	},
	{
		id: 6,
		title: "Q6. Inside an extension function, what is the name of the variable that corresponds to the receiver object",
		text: undefined,
		code2: undefined,
		choices: [
			"1. The variable is named **it**",
			"2. The variable is named **this**",
			"3. The variable is named **receiver**",
			"4. The variable is named **default**",
		],
		answer: "2. The variable is named **this**",
	},
	{
		id: 7,
		title: "Q7. Your application has an **add** function. How could you use its **invoke** methods and display the results?",
		text: undefined,
		code2: "fun add(a: Int, b: Int): Int { <br> return a + b <br> }",
		choices: [
			"1. `println(add(5,10).invoke())`",
			"2. `println(::add.invoke(5, 10))`",
			"3. `println(::add.invoke{5, 10})`",
			"4. `println(add.invoke(5,10))`",
		],
		answer: "2. `println(::add.invoke(5, 10))`",
	},
	{
		id: 8,
		title: "Q8. What is the entry point for a Kotlin application?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `fun static main(){}`",
			"2. `fun main(){}`",
			"3. `fun Main(){}`",
			"4. `public static void main(){}`",
		],
		answer: "2. `fun main(){}`",
	},
	{
		id: 9,
		title: "Q9. You are writing a console app in Kotlin that processes tests entered by the user. If the user enters an empty string, the program exits. Which kind of loop would work best for this app? Keep in mind that the loop is entered at least once",
		text: undefined,
		code2: undefined,
		choices: [
			"1. a do..while loop",
			"2. a for loop",
			"3. a while loop",
			"4. a forEach loop",
		],
		answer: "1. a do..while loop",
	},
	{
		id: 10,
		title: "Q10. You pass an integer to a function expecting type Any. It works without issue. Why is a primitive integer able to work with a function that expects an object?",
		text: undefined,
		code2: 'fun showHashCode(obj: Any){ <br> println("${obj.hashCode()}") <br> } <br> fun main() { <br> showHashCode(1) <br> }',
		choices: [
			"1. While the code runs, it does not produce correct results",
			"2. The integer is always a class",
			"3. The compiler runs an implicit `.toClass()` method on the integer",
			"4. The integer is autoboxed to a Kotlin Int class",
		],
		answer: "4. The integer is autoboxed to a Kotlin Int class",
	},
	{
		id: 11,
		title: "Q11. You have started a long-running coroutine whose job you have assigned to a variable named **task**. If the need arose, how could you abort the coroutine?",
		text: undefined,
		code2: "val task = launch { <br> // long running job <br> }",
		choices: [
			"1. `task.join()`",
			"2. `task.abort()`",
			"3. `job.stop()`",
			"4. `task.cancel()`",
		],
		answer: "4. `task.cancel()`",
	},
	{
		id: 12,
		title: "Q12. You are attempting to assign an integer variable to a long variable, but the Kotlin compiler flags it as an error. Why?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. You must wrap all implicit conversions in a try/catch block",
			"2. You can only assign `Long` to an `Int`, not the other way around",
			"3. There is no implicit conversion from `Int` to `Long`",
			"4. All integers in Kotlin are of type `Long`",
		],
		answer: "3. There is no implicit conversion from `Int` to `Long`",
	},
	{
		id: 13,
		title: "Q13. You have written a snippet of code to display the results of the roll of a six-sided die. When the die displays from 3 to 6 inclusive, you want to display a special message. Using a Kotlin range, what code should you add?",
		text: undefined,
		code2: 'when (die) { <br> 1 -> println("die is 1") <br> 2 -> println("die is 2") <br> ___ -> println("die is between 3 and 6") <br> else -> println("die is unknown") <br> }',
		choices: [
			"1. `3,4,5,6`",
			"2. `in 3..6`",
			"3. `3 : 6`",
			"4. `{3,4,5,6}`",
		],
		answer: "2. `in 3..6`",
	},
	{
		id: 14,
		title: 'Q14. The function **typeChecker** receives a parameter **obj** of type **Any**. Based upon the type of **obj**, it prints different messages for Int, String, Double, and Float types; if not any of the mentioned types, it prints "unknown type". What operator allows you to determine the type of an object?',
		text: undefined,
		code2: undefined,
		choices: ["1. `instanceof`", "2. `is`", "3. `typeof`", "4. `as`"],
		answer: "2. `is`",
	},
	{
		id: 15,
		title: "Q15. This code does not print any output to the console. What is wrong?",
		text: undefined,
		code2: 'firstName?.let { <br> println("Greeting $firstname!") <br> }',
		choices: [
			"1. A null pointer exception is thrown",
			"2. `firstName` is equal to `null`",
			"3. `firstName` is equal to an empty string",
			"4. `firstName` is equal to Boolean `false`",
		],
		answer: "2. `firstName` is equal to `null`",
	},
	{
		id: 16,
		title: "Q16. You have written a function simple() that is called frequently in your code. You place the inline prefix on the function. What effect does it have on the code?",
		text: undefined,
		code2: "inline fun simple(x: Int): Int{ <br> return x * x <br> } <br> fun main() { <br> for(count in 1..1000) { <br> simple(count) <br> } <br> }",
		choices: [
			"1. The code will give a stack overflow error",
			"2. The compiler warns of insignificant performance impact",
			"3. The compiler warns of significant memory usage",
			"4. The code is significantly faster",
		],
		answer: "2. The compiler warns of insignificant performance impact",
	},
	{
		id: 17,
		title: "Q17. How do you fill in the blank below to display all of the even numbers from 1 to 10 with least amount of code?",
		text: undefined,
		code2: 'for (_____) { <br> println("There are $count butterflies.") <br> }',
		choices: [
			"1. `count in 1..10`",
			"2. `count in 2..10 step 2`",
			"3. `count in 1..10 % 2`",
			"4. `var count=2; count <= 10; count+=2`",
		],
		answer: "2. `count in 2..10 step 2`",
	},
	{
		id: 18,
		title: "Q18. What value is printed by println()?",
		text: undefined,
		code2: 'val set = setOf("apple", "pear", "orange", "apple") <br> println(set.count())',
		choices: ["1. 3", "2. 4", "3. 1", "4. 5"],
		answer: "1. 3",
	},
	{
		id: 19,
		title: "Q19. Which line of code shows how to display a nullable string's length and shows 0 instead of null?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `println(b!!.length ?: 0)`",
			"2. `println(b?.length ?: 0)`",
			"3. `println(b?.length ?? 0)`",
			"4. `println(b == null? 0: b.length)`",
		],
		answer: "2. `println(b?.length ?: 0)`",
	},
	{
		id: 20,
		title: "Q20. In the file main.kt, you are filtering a list of integers and want to use an already existing function, removeBadValues. What is the proper way to invoke the function from filter in the line below?",
		text: undefined,
		code2: "val list2 = (80..100).toList().filter(_____)",
		choices: [
			"1. `::removeBadValues`",
			"2. `GlobalScope.removeBadValues()`",
			"3. `Mainkt.removeBadValues`",
			"4. `removeBadValues`",
		],
		answer: "1. `::removeBadValues`",
	},
	{
		id: 21,
		title: 'Q21. Which code snippet correctly shows a for loop using a range to display "1 2 3 4 5 6"?',
		text: undefined,
		code2: undefined,
		choices: [
			'1. `for(z in 1..7) println("$z ")`',
			'2. `for(z in 1..6) print("$z ")`',
			'3. `for(z in 1 to 6) print("$z ")`',
			'4. `for(z in 1..7) print("$z ")`',
		],
		answer: '2. `for(z in 1..6) print("$z ")`',
	},
	{
		id: 22,
		title: "Q22. You are upgrading a Java class to Kotlin. What should you use to replace the Java class's static fields?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. an anonymous object",
			"2. a static property",
			"3. a companion object",
			"4. a backing field",
		],
		answer: "3. a companion object",
	},
	{
		id: 23,
		title: "Q23. Your code need to try casting an object. If the cast is not possible, you do not want an exception generated, instead you want null to be assigned. Which operator can safely cast a value?",
		text: undefined,
		code2: undefined,
		choices: ["1. `as?`", "2. `??`", "3. `is`", "4. `as`"],
		answer: "1. `as?`",
	},
	{
		id: 24,
		title: "Q24. Kotlin will not compile this code snippet. What is wrong?",
		text: undefined,
		code2: "class Employee <br> class Manager : Employee()",
		choices: [
			"1. In order to inherit from a class, it must be marked **open**",
			"2. In order to inherit from a class, it must be marked **public**",
			"3. In order to inherit from a class, it must be marked **sealed**",
			"4. In order to inherit from a class, it must be marked **override**",
		],
		answer: "1. In order to inherit from a class, it must be marked **open**",
	},
	{
		id: 25,
		title: "Q25. Which function changes the value of the element at the current iterator location?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `change()`",
			"2. `modify()`",
			"3. `set()`",
			"4. `assign()`",
		],
		answer: "3. `set()`",
	},
	{
		id: 26,
		title: "Q26. From the Supervisor subclass, how do you call the Employee class's display() method?",
		text: undefined,
		code2: 'open class Employee(){ <br> open fun display() = println("Employee display()") <br> } <br> class Supervisor : Employee() { <br> override fun display() { <br> println("Supervisor display()") <br> } <br> }',
		choices: [
			"1. `Employee.display() `",
			"2. `::display()`",
			"3. `super.display()`",
			"4. `override.display()`",
		],
		answer: "3. `super.display()`",
	},
	{
		id: 27,
		title: "Q27. The code below was compiled and executed without issue before the addition of the line declaring errorStatus. Why does this line break the code?",
		text: undefined,
		code2: "sealed class Status(){ <br> object Error : Status() <br> class Success : Status() <br> } <br> fun main(){ <br> var successStatus = Status.Success() <br> var errorStatus = Status.Error() <br> }",
		choices: [
			"1. `StatusError` is an object, not a class and cannot be instantiated",
			"2. Only one instance of the class `Status` can be instantiated at a time",
			"3. `Status.Error` must be declared as an immutable type",
			"4. `Status.Error` is pribate to class and cannot be declared externally",
		],
		answer: "1. `StatusError` is an object, not a class and cannot be instantiated",
	},
	{
		id: 28,
		title: "Q28. The code below is expected to display the numbers from 1 to 10, but it does not. Why?",
		text: undefined,
		code2: "val seq = sequence { yieldAll(1..20) } <br> .filter { it < 11 } <br> println(seq)",
		choices: [
			"1. You cannot assign a sequence to a variable",
			"2. To produce result, a sequence must have terminal operation. In this case, it needs a `.toList()`",
			"3. The `.filter{ it < 11 }` should be `.filter{ it > 11 }`",
			"4. The `yieldAll(1..20)` should be `yieldAll(1..10)`",
		],
		answer: "2. To produce result, a sequence must have terminal operation. In this case, it needs a `.toList()`",
	},
	{
		id: 29,
		title: "Q29. What three methods does this class have?",
		text: undefined,
		code2: "class Person",
		choices: [
			"1. `equals(), hashCode(), and toString()`",
			"2. `equals(), toHash(), and super()`",
			"3. `print(), println(), and toString()`",
			"4. `clone(), equals(), and super()`",
		],
		answer: "1. `equals(), hashCode(), and toString()`",
	},
	{
		id: 30,
		title: "Q30. Which is the proper way to declare a singleton named DatabaseManager?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `object DatabaseManager {}`",
			"2. `singleton DatabaseManager {}`",
			"3. `static class DatabaseManager {}`",
			"4. `data class DatabaseManager {}`",
		],
		answer: "1. `object DatabaseManager {}`",
	},
	{
		id: 31,
		title: "Q31. In order to subclass the Person class, what is one thing you must do?",
		text: undefined,
		code2: "abstract class Person(val name: String) { <br> abstract fun displayJob(description: String) <br> }",
		choices: [
			"1. The subclass must be marked sealed",
			"2. You must override the `displayJob()` method",
			"3. You must mark the subclass as final",
			"4. An abstract class cannot be extended, so you must change it to open",
		],
		answer: "2. You must override the `displayJob()` method",
	},
	{
		id: 32,
		title: "Q32. The code snippet below translates a database user to a model user. Because their names are both User, you must use their fully qualified names, which is cumbersome. You do not have access to either of the imported classes' source code. How can you shorten the type names?",
		text: undefined,
		code2: 'import com.tekadept.app.model.User <br> import com.tekadept.app.database.User <br> class UserService{ <br> fun translateUser(user: com.tekadept.app.database.User): User = <br> com.tekadept.app.model.User("${user.first} ${user.last}") <br> }',
		choices: [
			"1. Use import as to change the type name",
			"2. Create subtypes with shorter names",
			"3. Create interfaces with shorter names",
			"4. Create extension classes with shorter names",
		],
		answer: "1. Use import as to change the type name",
	},
	{
		id: 33,
		title: "Q33. Your function is passed by a parameter obj of type Any. Which code snippet shows a way to retrieve the original type of obj, including package information?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `obj.classInfo()`",
			"2. `obj.typeInfo()`",
			"3. `obj::class.simpleName`",
			"4. `obj::class`",
		],
		answer: "4. `obj::class`",
	},
	{
		id: 34,
		title: "Q34. Which is the correct declaration of an integer array with a size of 5?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val arrs[5]: Int`",
			"2. `val arrs = IntArray(5)`",
			"3. `val arrs: Int[5]`",
			"4. `val arrs = Array<Int>(5)`",
		],
		answer: "2. `val arrs = IntArray(5)`",
	},
	{
		id: 35,
		title: "Q35. You have created a class that should be visible only to the other code in its module. Which modifier do you use?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `internal`",
			"2. `private`",
			"3. `public`",
			"4. `protected`",
		],
		answer: "1. `internal`",
	},
	{
		id: 36,
		title: "Q36. Kotlin has two equality operators, == and ===. What is the difference?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `==` determines if two primitive types are identical. `===` determines if two objects are identical",
			"2. `==` determines if two references point to the same object. `===` determines if two objects have the same value",
			"3. `==` determines if two objects have the same value. `===` determines if two strings have the same value",
			"4. `==` determines if two objects have the same value. `===` determines if two references point to the same object",
		],
		answer: "4. `==` determines if two objects have the same value. `===` determines if two references point to the same object",
	},
	{
		id: 37,
		title: "Q37. Which snippet correctly shows setting the variable max to whichever variable holds the greatest value, a or b, using idiomatic Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val max3 = a.max(b)`",
			"2. `val max = a > b ? a : b`",
			"3. `val max = if (a > b) a else b`",
			"4. `if (a > b) max = a else max = b`",
		],
		answer: "3. `val max = if (a > b) a else b`",
	},
	{
		id: 38,
		title: "Q38. You have an enum class Signal that represents the state of a network connection. You want to print the position number of the SENDING enum. Which line of code does that?",
		text: undefined,
		code2: "enum class Signal { OPEN, CLOSED, SENDING }",
		choices: [
			"1. `println(Signal.SENDING.position())`",
			"2. `println(Signal.SENDING.hashCode())`",
			"3. `println(Signal.SENDING)`",
			"4. `println(Signal.SENDING.ordinal)`",
		],
		answer: "4. `println(Signal.SENDING.ordinal)`",
	},
	{
		id: 39,
		title: "Q39. Both const and @JvmField create constants. What can const do that @JvmField cannot?",
		text: undefined,
		code2: 'class Detail { <br> companion object { <br> const val COLOR = "Blue" <br> @JvmField val SIZE = "Really Big" <br> } <br> }',
		choices: [
			"1. `const` is compatible with Java, but `@JvmField` is not",
			"2. The compiler will inline const so it is faster and more memory efficient",
			"3. Virtually any type can be used with const but not `@JvmField`",
			"4. const can also be used with mutable types",
		],
		answer: "2. The compiler will inline const so it is faster and more memory efficient",
	},
	{
		id: 40,
		title: "Q40. You have written a when expression for all of the subclasses of the class Attribute. To satisfy the when, you must include an else clause. Unfortunately, whenever a new subclass is added, it returns unknown. You would prefer to remove the else clause so the compiler generates an error for unknown subtypes. What is one simple thing you can do to achieve this?",
		text: undefined,
		code2: 'open class Attribute <br> class Href: Attribute() <br> class Src: Attribute() <br> class Alt: Attribute() <br> fun getAttribute(attribute: Attribute) : String { <br> return when (attribute) { <br> is Href -> "href" <br> is Alt -> "alt" <br> is Src -> "src" <br> else -> "unknown" <br> } <br> }',
		choices: [
			"1. Replace `open` with `closed`",
			"2. Replace `open` with `sealed`",
			"3. Replace `open` with `private`",
			"4. Replace `open` with `public`",
		],
		answer: "2. Replace `open` with `sealed`",
	},
	{
		id: 41,
		title: "Q41. You would like to know each time a class property is updated. Which code snippet shows a built-in delegated property that can accomplish this?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Delegates.watcher()`",
			"2. `Delegates.observable()`",
			"3. `Delegates.rx()`",
			"4. `Delegates.observer()`",
		],
		answer: "2. `Delegates.observable()`",
	},
	{
		id: 42,
		title: "Q42. Why doesn't this code compile?",
		text: undefined,
		code2: 'val addend = 1 <br> infix fun Int.add(added: Int=1) = this + addend <br> fun main(){ <br> val msg = "Hello" <br> println( msg shouldMatch "Hello") <br> println( 10 multiply 5 + 2) <br> println( 10 add 5) <br> }',
		choices: [
			"1. infix function must be marked public",
			"2. In Kotlin, add is a keyword",
			"3. Extension functions use `it`, not `this`, as the default parameter name",
			"4. infix functions cannot have default values",
		],
		answer: "4. infix functions cannot have default values",
	},
	{
		id: 43,
		title: "Q43. What is the correct way to initialize a nullable variable?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val name = null`",
			"2. `var name: String`",
			"3. `val name: String`",
			"4. `val name: String? = null`",
		],
		answer: "4. `val name: String? = null`",
	},
	{
		id: 44,
		title: "Q44. Which line of code is a shorter, more idiomatic version of the displayed snippet?",
		text: undefined,
		code2: "val len: Int = if (x != null) x.length else -1",
		choices: [
			"1. `val len = x?.let{x.len} else {-1}`",
			"2. `val len = x!!.length ?: -1`",
			"3. `val len:Int = (x != null)? x.length : -1`",
			"4. `val len = x?.length ?: -1`",
		],
		answer: "4. `val len = x?.length ?: -1`",
	},
	{
		id: 45,
		title: "Q45. You are creating a Kotlin unit test library. What else you should add to make the following code compile without error?",
		text: undefined,
		code2: 'fun String.shouldEqual(value: String) = this == value <br> fun main(){ <br> val msg = "test message" <br> println(msg shouldEqual "test message") <br> }',
		choices: [
			"1. The extension function should be marked `public`",
			"2. Add the prefix `operator` to the `shouldMatch` extension function",
			'3. The code is not legal in Kotlin (should be `println(msg.shouldEqual("test message"))`) ',
			"4. Add the prefix `infix` to the `shouldMatch` extension function",
		],
		answer: "4. Add the prefix `infix` to the `shouldMatch` extension function",
	},
	{
		id: 46,
		title: "Q46. What is the difference between the declarations of COLOR and SIZE?",
		text: undefined,
		code2: 'class Record{ <br> companion object { <br> const val COLOR = "Red" <br> val SIZE = "Large" <br> } <br> }',
		choices: [
			"1. Since `COLOR` and `SIZE` are both immutable, they are identical internally",
			"2. Both are immutable, but the use of the keyword const makes `COLOR` slower and less space efficient than `SIZE`",
			"3. const makes `COLOR` faster, but not compatible with Java. Without const, `SIZE` is still compatible with Java",
			"4. Both are immutable, but the use of the keyword const makes `COLOR` faster and more space efficient than `SIZE`",
		],
		answer: "4. Both are immutable, but the use of the keyword const makes `COLOR` faster and more space efficient than `SIZE`",
	},
	{
    "id": 48,
    "title": "Q48. The code below shows a typical way to show both index and value in many languages, including Kotlin. Which line of code shows a way to get both index and value more idiomatically?",
    "text": undefined,
    "code2": "var ndx = 0; <br> for (value in 1..5){ <br> println(\"$ndx - $value\") <br> ndx++ <br> }",
    "choices": [
      "1. `for( (ndx, value) in (1..20).withIndex() ){`",
      "2. `for( (ndx, value) in (1..20).pair() ){`",
      "3. `for( Pair(ndx, value) in 1..20 ){`",
      "4. `for( (ndx, value) in *(1..20) ){`"
    ],
    "answer": "1. `for( (ndx, value) in (1..20).withIndex() ){`"
  },
  {
    "id": 49,
    "title": "Q49. The Kotlin .. operator can be written as which function?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `a.from(b)`",
      "2. `a.range(b)`",
      "3. `a.rangeTo(b)`",
      "4. `a.to(b)`"
    ],
    "answer": "3. `a.rangeTo(b)`"
  },
  {
    "id": 50,
    "title": "Q50. How can you retrieve the value of the property codeName without referring to it by name or destructuring?",
    "text": undefined,
    "code2": "data class Project(var codeName: String, var version: String) <br> fun main(){ <br> val proj = Project(\"Chilli Pepper\", \"2.1.0\") <br> }",
    "choices": [
      "1. `proj.0`",
      "2. `proj[0]`",
      "3. `proj[1]`",
      "4. `proj.component1()`"
    ],
    "answer": "4. `proj.component1()`"
  },
  {
    "id": 51,
    "title": "Q51. This function generates the Fibonacci sequence. Which function is missing?",
    "text": undefined,
    "code2": "fun fibonacci() = sequence { <br> var params = Pair(0, 1) <br> while (true) { <br> ___ (params.first) <br> params = Pair(params.second, params.first + params.second) <br> } <br> }",
    "choices": [
      "1. `with()`",
      "2. `yield()`",
      "3. `skip()`",
      "4. `return()`"
    ],
    "answer": "2. `yield()`"
  },
  {
    "id": 52,
    "title": "Q52. In this code snippet, why does the compiler not allow the value of y to change?",
    "text": undefined,
    "code2": "for(y in 1..100) y+=2",
    "choices": [
      "1. `y` must be declared with `var` to be mutable",
      "2. `y` is an implicitly immutable value",
      "3. `y` can change only in a while loop",
      "4. In order to change `y`, it must be declared outside of the loop"
    ],
    "answer": "2. `y` is an implicitly immutable value"
  },
  {
    "id": 53,
    "title": "Q53. You have created a data class, Point, that holds two properties, x and y, representing a point on a grid. You want to use the hash symbol for subtraction on the Point class, but the code as shown will not compile. How can you fix it?",
    "text": undefined,
    "code2": "data class Point(val x: Int, val y: Int) <br> operator fun Point.plus(other: Point) = Point(x + other.x, y + other.y) <br> operator fun Point.hash(other: Point) = Point(x - other.x, y - other.y) <br> fun main() { <br> val point1 = Point(10, 20) <br> val point2 = Point(20, 30) <br> println(point1 + point2) <br> println(point1 # point2) <br> }",
    "choices": [
      "1. You cannot; the hash symbol is not a valid operator.",
      "2. You should replace the word hash with octothorpe, the actual name for the symbol.",
      "3. You should use `minus` instead of hash, then type alias the minus symbol.",
      "4. You need to replace the operator with the word `infix`."
    ],
    "answer": "3. You should use `minus` instead of hash, then type alias the minus symbol."
  },
  {
    "id": 54,
    "title": "Q54. This code snippet compiles and runs without issue, but does not wait for the coroutine to show the \"there\" message. Which line of code will cause the code to wait for the coroutine to finish before exiting?",
    "text": undefined,
    "code2": "fun main() = runBlocking { <br> val task = GlobalScope.launch { <br> delay(1000L) <br> println(\"there\") <br> } <br> println(\"Hello,\") <br> }",
    "choices": [
      "1. `task.complete()`",
      "2. `task.wait()`",
      "3. `task.join()`",
      "4. `task.cancel()`"
    ],
    "answer": "3. `task.join()`"
  },
  {
    "id": 55,
    "title": "Q55. You would like to group a list of students by last name and get the total number of groups. Which line of code accomplishes this, assuming you have a list of the Student data class?",
    "text": undefined,
    "code2": "data class Student(val firstName: String, val lastName: String)",
    "choices": [
      "1. `println(students.groupBy{ it.lastName }.count())`",
      "2. `println(students.groupBy{ it.lastName.first() }.fold().count())`",
      "3. `println(students.groupingBy{ it.lastName.first() }.count())`",
      "4. `println(students.groupingBy{ it.lastName.first() }.size())`"
    ],
    "answer": "1. `println(students.groupBy{ it.lastName }.count())`"
  },
  {
    "id": 56,
    "title": "Q56. Class BB inherits from class AA. BB uses a different method to calculate the price. As shown, the code does not compile. What changes are needed to resolve the compilation error?",
    "text": undefined,
    "code2": "open class AA() { <br> var price: Int = 0 <br> get() = field + 10 <br> } <br> class BB() : AA() { <br> var price: Int = 0 <br> get() = field + 20 <br> }",
    "choices": [
      "1. You need to add a `lateinit` modifier to `AA.price`.",
      "2. You simply need to add an `override` modifier to `BB.price`.",
      "3. You need to add an `open` modifier to `AA.price` and an `override` modifier to `BB.price`.",
      "4. You need to add a `public` modifier to `AA.price` and a `protected` modifier to `BB.price`."
    ],
    "answer": "3. You need to add an `open` modifier to `AA.price` and an `override` modifier to `BB.price`."
  },
  {
    "id": 57,
    "title": "Q57. What is the output of this code?",
    "text": undefined,
    "code2": "val quote = \"The eagle has landed.\" <br> println(\"The length of the quote is $quote.length\")",
    "choices": [
      "1. The length of the quote is The eagle has landed.",
      "2. A compilation error is displayed.",
      "3. The length of the quote is `21`",
      "4. The length of the quote is `The eagle has landed..length`"
    ],
    "answer": "4. The length of the quote is `The eagle has landed..length`"
  },
  {
    "id": 58,
    "title": "Q58. You have an unordered list of high scores. Which is the simple method to sort the highScores in descending order?",
    "text": undefined,
    "code2": "fun main() { <br> val highScores = listOf(4000, 2000, 10200, 12000, 9030)",
    "choices": [
      "1. `.sortedByDescending()`",
      "2. `.descending()`",
      "3. `.sortedDescending()`",
      "4. `.sort(\"DESC\")`"
    ],
    "answer": "3. `.sortedDescending()`"
  },
  {
    "id": 59,
    "title": "Q59. Your class has a property name that gets assigned later. You do not want it to be a nullable type. Using a delegate, how should you declare it?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `lateinit var name: String`",
      "2. `var name: String by lazy`",
      "3. `var name: String by Delegates.notNull()`",
      "4. `var name: String? = null`"
    ],
    "answer": "3. `var name: String by Delegates.notNull()`"
  },
  {
    "id": 60,
    "title": "Q60. You want to know each time a class property is updated. If the new value is not within range, you want to stop the update. Which code snippet shows a built-in delegated property that can accomplish this?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `Delegates.vetoable()`",
      "2. `Delegates.cancellable()`",
      "3. `Delegates.observer()`",
      "4. `Delegates.watcher()`"
    ],
    "answer": "1. `Delegates.vetoable()`"
  },
  {
    "id": 61,
    "title": "Q61. Which line of code shows how to call a Fibonacci function, bypass the first three elements, grab the next six, and sort the elements in descending order?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `val sorted = fibonacci().skip(3).take(6).sortedDescending().toList()`",
      "2. `val sorted = fibonacci().skip(3).take(6).sortedByDescending().toList()`",
      "3. `val sorted = fibonacci().skip(3).limit(6).sortedByDescending().toList()`",
      "4. `val sorted = fibonacci().drop(3).take(6).sortedDescending().toList()`"
    ],
    "answer": "4. `val sorted = fibonacci().drop(3).take(6).sortedDescending().toList()`"
  },
  {
    "id": 62,
    "title": "Q62. You have two arrays, a and b. Which line combines a and b as a list containing the contents of both?",
    "text": undefined,
    "code2": "val a = arrayOf(1, 2, 3) <br> val b = arrayOf(100, 200, 3000)",
    "choices": [
      "1. `val c = list of (a, b)`",
      "2. `val c = a + b`",
      "3. `val c = listOf(a+b)`",
      "4. `val c = listOf(*a, *b)`"
    ],
    "answer": "4. `val c = listOf(*a, *b)`"
  },
  {
    "id": 63,
    "title": "Q63. This code occasionally throws a null pointer exception (NPE). How can you change the code so it never throws as NPE?",
    "text": undefined,
    "code2": "println(\"length of First Name = \${firstName!!.length}\")",
    "choices": [
      "1. Replace `!!.` with `?.`",
      "2. Replace `!!.` with `?:.`",
      "3. Surround the line with a try/catch block.",
      "4. Replace `!!.` with `?.let`."
    ],
    "answer": "1. Replace `!!.` with `?.`"
  },
  {
    "id": 64,
    "title": "Q64. What is the execution order of init blocks and properties during initialization?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. All of the properties are executed in order of appearance, and then the init blocks are executed.",
      "2. The init blocks and properties are executed in the same order they appear in the code.",
      "3. All of the init blocks are executed in order of appearance, and then the properties are executed.",
      "4. The order of execution is not guaranteed, so code should be written accordingly."
    ],
    "answer": "2. The init blocks and properties are executed in the same order they appear in the code."
  },
  {
    "id": 65,
    "title": "Q65. Both const and @JvmField create constants. What can @JvmField do that const cannot?",
    "text": undefined,
    "code2": "class Styles { <br> companion object { <br> const val COLOR = \"Blue\" <br> @JvmField val SIZE = \"Really big\" <br> } <br> }",
    "choices": [
      "1. `const` works only with strings and primitives. `@JvmField` does not have that restriction.",
      "2. `@JvmField` works as a top-level variable, but `const` works only in a class.",
      "3. `@JvmField` is compatible with Java, but `const` is not.",
      "4. `@JvmField` is always inlined for faster code."
    ],
    "answer": "1. `const` works only with strings and primitives. `@JvmField` does not have that restriction."
  },
  {
    "id": 66,
    "title": "Q66. What are the two ways to make a coroutine's computation code cancellable?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Call the `yield()` function or check the `isActive` property.",
      "2. Call the `cancelled()` function or check the `isActive` property.",
      "3. Call the `stillActive()` function or check the `isCancelled` property.",
      "4. Call the `checkCancelled()` function or check the `isCancelled` property."
    ],
    "answer": "1. Call the `yield()` function or check the `isActive` property."
  },
  {
    "id": 67,
    "title": "Q67. Given the code below, how can you write the line this.moveTo(\"LA\") more concisely?",
    "text": undefined,
    "code2": "data class Student (val name: String, var location: String) { <br> fun moveTo (newLoc: String) { location = newLoc } <br> } <br> fun main() { <br> Student (\"Snow\", \"Cologne\").run { <br> this.moveTo (\"LA\") <br> } <br> }",
    "choices": [
      "1. `moveTo(\"LA\")`",
      "2. `::moveTo(\"LA\")`",
      "3. `_.moveTo(\"LA\")`",
      "4. `it.moveTo(\"LA\")`"
    ],
    "answer": "1. `moveTo(\"LA\")`"
  },
  {
    "id": 68,
    "title": "Q68. For the Product class you are designing, you would like the price to be readable by anyone, but changeable only from within the class. Which property declaration implements your design?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Option 1\n```\nvar price: Int = 0\n public get()\n private set\n```",
      "2. Option 2\n```\nvar price: Int = 0\n private set\n```",
      "3. Option 3\n```\nvar price: Int = 0\n val set\n```",
      "4. Option 4\n```\nval price: Int=0\n```"
    ],
    "answer": "2. Option 2\n```\nvar price: Int = 0\n private set\n```"
  },
  {
    "id": 69,
    "title": "Q69. What will happen when you try to build and run this code snippet?",
    "text": undefined,
    "code2": "class SpecialFunction : () -> Unit { <br> override fun invoke() { <br> println(\"Invoked from an instance.\") <br> } <br> } <br> fun main() { <br> try { SpecialFunction()() } <br> catch (ex: Exception) { println(\"An error occurred\") } <br> }",
    "choices": [
      "1. A syntax error occurs due to the line `SpecialFunction()()`. ",
      "2. The message \"An Error occurred\" is displayed.",
      "3. The message \"Invoked from an instance.\" is displayed.",
      "4. A compile error occurs. You cannot override the `invoke()` method."
    ],
    "answer": "3. The message \"Invoked from an instance.\" is displayed."
  },
  {
    "id": 70,
    "title": "Q70. Which statement declares a variable mileage whose value never changes and is inferred to be an integer?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `val mileage:Int = 566`",
      "2. `var mileage:Int = 566`",
      "3. `val mileage = 566`",
      "4. `const int mileage = 566`"
    ],
    "answer": "3. `val mileage = 566`"
  },
  {
    "id": 71,
    "title": "Q71. What is the preferred way to create an immutable variable of type long?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `var longInt = 10L`",
      "2. `const long longInt = 10`",
      "3. `val longInt = 10L`",
      "4. `val longInt:Long = 10`"
    ],
    "answer": "3. `val longInt = 10L`"
  },
  {
    "id": 72,
    "title": "Q72. Which line converts the binaryStr, which contains only 0s and 1s, to an integer representing its decimal value?",
    "text": undefined,
    "code2": "val binaryStr = \"00001111\"",
    "choices": [
      "1. `val myInt = toInt(binaryStr)`",
      "2. `val myInt = binaryStr.toInt(\"0b\")`",
      "3. `val myInt = binaryStr.toInt()`",
      "4. `val myInt = binaryStr.toInt(2)`"
    ],
    "answer": "4. `val myInt = binaryStr.toInt(2)`"
  },
  {
    "id": 73,
    "title": "Q73. In a Kotlin program, which lines can be marked with a label",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `Any program line can be marked with a label`",
      "2. `Any statement can be marked with a label`",
      "3. `Any expression can be marked with a label`",
      "4. `Only the beginning of loops can be marked with a label`"
    ],
    "answer": "3. `Any expression can be marked with a label`"
  },
  {
    "id": 74,
    "title": "Q74. All classes in Kotlin inherit from which superclass?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. `Default`",
      "2. `Super`",
      "3. `Any`",
      "4. `Object`"
    ],
    "answer": "3. `Any`"
  },
  {
    "id": 75,
    "title": "Q75. You have written a function, sort(), that should accept only collections that implement the `Comparable` interface. How can you restrict the function?",
    "text": undefined,
    "code2": "fun sort(list: List<T>): List <T> { <br> return list.sorted() <br> }",
    "choices": [
      "1. Add `<T -> Comparable<T>>` between the `fun` keyword and the function name",
      "2. Add `Comparable<T>` between the `fun` keyword and the function name",
      "3. Add `<T : Comparable<T>>` between the `fun` keyword and the function name",
      "4. Add `<T where Comparable<T>>` between the `fun` keyword and the function name"
    ],
    "answer": "3. Add `<T : Comparable<T>>` between the `fun` keyword and the function name"
  },
  {
    "id": 76,
    "title": "Q76. Kotlin classes are final by default. What does final mean?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. final means that you cannot use interfaces with this class.",
      "2. final means that this is the only file that can use the class.",
      "3. final means that you cannot extend the class.",
      "4. final classes cannot be used in the final section of a try/catch block."
    ],
    "answer": "3. final means that you cannot extend the class."
  },
  {
    "id": 77,
    "title": "Q77. You have created an array to hold three strings. When you run the code below, the compiler displays an error. Why does the code fail?",
    "text": undefined,
    "code2": "val names = arrayOf<String>(3) <br> names[3]= \"Delta\"",
    "choices": [
      "1. Arrays use zero-based indexes. The value 3 is outside of the array's bounds",
      "2. You accessed the element with an index but should have used.set().",
      "3. You declared the array with val but should have used var",
      "4. You cannot changes the value of an element of an array. You should have used a mutable list."
    ],
    "answer": "1. Arrays use zero-based indexes. The value 3 is outside of the array's bounds"
  },
  {
    "id": 78,
    "title": "Q78. If a class has one or more secondary constructors, what must each of them do?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Each secondary constructor must call super().",
      "2. Each secondary constructor must call base().",
      "3. Each secondary constructor must directly or indirectly delegate to the primary.",
      "4. Each secondary constructor must have the same name as the class."
    ],
    "answer": "3. Each secondary constructor must directly or indirectly delegate to the primary."
  },
  {
    "id": 79,
    "title": "Q79. When you can omit the constructor keyword from the primary constructor?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. It can be omitted only if an init block is defined.",
      "2. It can be omitted anytime; it is not mandatory.",
      "3. It can be omitted if secondary constructors are defined.",
      "4. It can be omitted when the primary constructor does not have any modifiers or annotations."
    ],
    "answer": "4. It can be omitted when the primary constructor does not have any modifiers or annotations."
  },
  {
    "id": 80,
    "title": "Q80. How many different kinds of constructors are available for kotlin classes?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. two.",
      "2. none.",
      "3. four.",
      "4. one."
    ],
    "answer": "1. two."
  },
  {
    "id": 81,
    "title": "Q81. What is the default visibility modifier in Kotlin?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. protected",
      "2. private",
      "3. internal",
      "4. public"
    ],
    "answer": "4. public"
  },
  {
    "id": 82,
    "title": "Q82. The code below compiles and executes without issue, but is not idiomatic kotlin. What is a better way to implement the `printlln()`?",
    "text": undefined,
    "code2": "fun main() { <br> val name: String = \"Amos\" <br> val grade: Float = 95.5f <br> println(\"My name is \" + name + \". I score \" + grade + \" points on the last coding quiz.\") <br> }",
    "choices": [
      "1. Use `new printf()`. ",
      "2. Use `string.format` instead.",
      "3. Use `string append` instead.",
      "4. Use string templates instead."
    ],
    "answer": "4. Use string templates instead."
  },
  {
    "id": 83,
    "title": "Q83. You have enum class Signal that represents a state of the network connection. You want to iterate over each member of the enum. Which line of code shows how to do that `? ",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Signal.sequence().",
      "2. Signal.toArray().",
      "3. Signal.values().",
      "4. Signal.toList(). "
    ],
    "answer": "3. Signal.values(). "
  },
  {
    "id": 84,
    "title": "Q84. You'd like to create a multiline string that includes the carriage return character. What should you use to enclose the string?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Double quotes(\"\").",
      "2. Single quotes('\').",
      "3. Tripple quote(\"\"\").",
      "4. Backticks(`). "
    ],
    "answer": "3. Tripple quote(\"\"\")."
  },
  {
    "id": 85,
    "title": "Q85. You want your class member to be visible to subclasses. Which modifier do you use?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Public.",
      "2. Protected.",
      "3. Internal.",
      "4. Private."
    ],
    "answer": "2. Protected."
  },
  {
    "id": 86,
    "title": "Q86. Which line of code shows how to create a finite sequence of the numbers 1 to 99 and then convert it into a list?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. val lessThan99 = generateSequence(1){ if (it < 99) it + 1 else null }.toList().",
      "2. val lessThan99 = generateSequence(0){ if (it < 99)}.toList().",
      "3. val lessThan99 = generateSequence(1..9){ if (it < 99) it + 1 else null }.toList().",
      "4. val lessThan99 = listOf{1..99}.asSequence().toList()"
    ],
    "answer": "1. val lessThan99 = generateSequence(1){ if (it < 99) it + 1 else null }.toList()"
  },
  {
    "id": 87,
    "title": "Q87. What is wrong with this class definition?",
    "text": undefined,
    "code2": "class Empty",
    "choices": [
      "1. The class is properly defined, so nothing is wrong with it.",
      "2. The parentheses are missing-it should be declared as class Empty().",
      "3. Empty is a Kotlin keyword, so the code will generate an error when compiled.",
      "4. The curly braces are missing from the declaration of Empty."
    ],
    "answer": "1. The class is properly defined, so nothing is wrong with it."
  },
  {
    "id": 88,
    "title": "Q88. What is a higher-order function in Kotlin?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. A higher-order function is a function that returns a value other than Unit.",
      "2. A higher-order function is the function that appears before others in a file.",
      "3. A higher-order function is one that can be stored in a variable.",
      "4. A higher-order function is a function that takes a function as a parameter or returns a function."
    ],
    "answer": "4. A higher-order function is a function that takes a function as a parameter or returns a function."
  },
  {
    "id": 89,
    "title": "Q89. What is Kotlin?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. A markup language commonly used for web development.",
      "2. A general-purpose, statically typed, open-source programming language.",
      "3. A relational database management system.",
      "4. A web framework for building dynamic web applications."
    ],
    "answer": "2. A general-purpose, statically typed, open-source programming language."
  },
  {
    "id": 90,
    "title": "Q90. Who developed Kotlin?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Google",
      "2. Apple",
      "3. Microsoft",
      "4. JetBrains"
    ],
    "answer": "4. JetBrains"
  },

  {
    "id": 93,
    "title": "Q93. Why do some developers switch to Kotlin from Java?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Kotlin is more concise and cleaner.",
      "2. Kotlin offers useful features not present in Java.",
      "3. Kotlin has good support for Android development.",
      "4. Kotlin is interoperable with Java.",
      "5. All of the above"
    ],
    "answer": "5. All of the above"
  },
  {
    "id": 94,
    "title": "Q94. How does Kotlin work on Android?",
    "text": undefined,
    "code2": undefined,
    "choices": [
      "1. Kotlin code is compiled directly into machine code.",
      "2. Kotlin code is interpreted at runtime.",
      "3. Kotlin code is compiled into Java bytecode and runs on the JVM.",
      "4. Kotlin code is compiled into C++ code for Android."
    ],
    "answer": "3. Kotlin code is compiled into Java bytecode and runs on the JVM."
  },
];

let kotlinOops = [
	{
		id: 1,
		title: "Q1. What is the purpose of the `open` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It allows a class to be subclassed.",
			"3. It defines a function as a property.",
			"4. It makes a variable immutable.",
		],
		answer: "2. It allows a class to be subclassed.",
	},
	{
		id: 2,
		title: "Q2. Which of these is NOT a valid way to create an instance of a class in Kotlin?",
		text: undefined,
		code2: "class Person(val name: String) { <br> }",
		choices: [
			'1. `val person = Person("John")`',
			'2. `val person = Person(name = "John")`',
			'3. `val person = Person.new("John")`',
			'4. `val person: Person = Person("John")`',
		],
		answer: '3. `val person = Person.new("John")`',
	},
	{
		id: 3,
		title: "Q3. What is the difference between an abstract class and an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. An interface can have constructor parameters, while an abstract class cannot.",
			"2. An abstract class can have non-abstract methods, while an interface can only have abstract methods.",
			"3. An interface can have only one parent, while an abstract class can have multiple parents.",
			"4. An abstract class can be instantiated directly, while an interface cannot.",
		],
		answer: "2. An abstract class can have non-abstract methods, while an interface can only have abstract methods.",
	},
	{
		id: 4,
		title: "Q4. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
	{
		id: 5,
		title: "Q5. How do you override a method in a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Animal { <br> fun makeSound() { println("Generic animal sound") } <br> } <br> class Dog : Animal() { <br> // ... <br> }',
		choices: [
			"1. Use the `override` keyword before the method declaration.",
			"2. Use the `final` keyword before the method declaration.",
			"3. Use the `abstract` keyword before the method declaration.",
			"4. Use the `static` keyword before the method declaration.",
		],
		answer: "1. Use the `override` keyword before the method declaration.",
	},
	{
		id: 6,
		title: "Q6. What is the purpose of the `companion object` in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines a static method for the class.",
			"2. It is used to create an instance of the class.",
			"3. It defines a constructor for the class.",
			"4. It is used to declare a private constructor.",
		],
		answer: "1. It defines a static method for the class.",
	},
	{
		id: 7,
		title: "Q7. How do you access a property of the superclass from a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Shape { <br> val color: String = "Red" <br> } <br> class Circle : Shape() { <br> // ... <br> }',
		choices: [
			"1. `Shape.color`",
			"2. `super.color`",
			"3. `this.color`",
			"4. `Circle.color`",
		],
		answer: "2. `super.color`",
	},
	{
		id: 8,
		title: "Q8. What is the difference between a primary constructor and a secondary constructor in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A primary constructor is defined in the class header, while a secondary constructor is defined in the class body.",
			"2. A primary constructor can have only one parameter, while a secondary constructor can have multiple parameters.",
			"3. A primary constructor must initialize all of the class's properties, while a secondary constructor does not have to initialize all of the class's properties.",
			"4. A primary constructor can only be called once, while a secondary constructor can be called multiple times.",
		],
		answer: "1. A primary constructor is defined in the class header, while a secondary constructor is defined in the class body.",
	},
	{
		id: 9,
		title: "Q9. What is the purpose of the `sealed` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It prevents a class from being subclassed.",
			"3. It restricts subclassing to a specific set of classes.",
			"4. It defines a class as a data class.",
		],
		answer: "3. It restricts subclassing to a specific set of classes.",
	},
	{
		id: 10,
		title: "Q10. How do you declare an abstract class in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. Using the `abstract` keyword before the class declaration.",
			"2. Using the `final` keyword before the class declaration.",
			"3. Using the `sealed` keyword before the class declaration.",
			"4. Using the `interface` keyword before the class declaration.",
		],
		answer: "1. Using the `abstract` keyword before the class declaration.",
	},
	{
		id: 11,
		title: "Q11. What is the purpose of the `data` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines a class that can hold only immutable data.",
			"2. It defines a class that has automatically generated equals(), hashCode(), toString(), and copy() methods.",
			"3. It defines a class that can be used as a data structure.",
			"4. It defines a class that is specifically designed for Android development.",
		],
		answer: "2. It defines a class that has automatically generated equals(), hashCode(), toString(), and copy() methods.",
	},
	{
		id: 12,
		title: "Q12. Which of these is a valid way to declare an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `class Animal`",
			"2. `abstract class Animal`",
			"3. `sealed class Animal`",
			"4. `interface Animal` ",
		],
		answer: "4. `interface Animal` ",
	},
	{
		id: 13,
		title: "Q13. What is the meaning of the `override` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines a method as a property.",
			"2. It makes a variable immutable.",
			"3. It indicates that a method is overriding a method from a superclass.",
			"4. It defines a constructor for a class.",
		],
		answer: "3. It indicates that a method is overriding a method from a superclass.",
	},
	{
		id: 14,
		title: "Q14. What is the difference between a `val` and a `var` property in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A `val` property is immutable, while a `var` property is mutable.",
			"2. A `val` property can be initialized later, while a `var` property must be initialized immediately.",
			"3. A `val` property can be accessed from any part of the code, while a `var` property can only be accessed from within the class.",
			"4. There is no difference; `val` and `var` are interchangeable.",
		],
		answer: "1. A `val` property is immutable, while a `var` property is mutable.",
	},
	{
		id: 15,
		title: "Q15. Which of the following is a valid way to declare a property in a Kotlin class?",
		text: undefined,
		code2: "class Person { <br> // ... <br> }",
		choices: [
			'1. `val name: String = "John"`',
			'2. `private val name: String = "John"`',
			'3. `var name: String = "John"`',
			"4. All of the above",
		],
		answer: "4. All of the above",
	},
	{
		id: 16,
		title: "Q16. What is the purpose of the `super` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It creates an instance of a class.",
			"2. It defines a constructor for a class.",
			"3. It calls a method or accesses a property of the superclass.",
			"4. It declares a variable as immutable.",
		],
		answer: "3. It calls a method or accesses a property of the superclass.",
	},
	{
		id: 17,
		title: "Q17.  What is the purpose of the `companion object` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define static methods and properties for a class.",
			"2. To provide a way to create an instance of a class.",
			"3. To define a constructor for a class.",
			"4. To declare a private constructor for a class.",
		],
		answer: "1. To define static methods and properties for a class.",
	},
	{
		id: 18,
		title: "Q18. How do you create an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `class MyInterface`",
			"2. `abstract class MyInterface`",
			"3. `sealed class MyInterface`",
			"4. `interface MyInterface` ",
		],
		answer: "4. `interface MyInterface` ",
	},
	{
		id: 19,
		title: "Q19. What is the role of `abstract` methods in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. They are methods that are not implemented in the class.",
			"2. They are methods that are called only once.",
			"3. They are methods that are private to the class.",
			"4. They are methods that are only used in interfaces.",
		],
		answer: "1. They are methods that are not implemented in the class.",
	},
	{
		id: 20,
		title: "Q20. What is the main purpose of a data class in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define a class that can be used as a data structure.",
			"2. To provide a class with automatically generated methods for data manipulation.",
			"3. To create instances of other classes.",
			"4. To define a class that has static methods.",
		],
		answer: "2. To provide a class with automatically generated methods for data manipulation.",
	},
	{
		id: 21,
		title: "Q21.  How do you define a property that can only be changed within the class itself (private setter) in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `var name: String = "John"`',
			'2. `val name: String = "John"`',
			'3. `private val name: String = "John"`',
			'4. `var name: String = "John" private set` ',
		],
		answer: '4. `var name: String = "John" private set` ',
	},
	{
		id: 22,
		title: "Q22. How do you override a property in Kotlin?",
		text: undefined,
		code2: "open class Animal { <br> var age: Int = 0 <br> } <br> class Dog : Animal() { <br> // ... <br> }",
		choices: [
			"1. Using the `override` keyword before the property declaration.",
			"2. Using the `final` keyword before the property declaration.",
			"3. Using the `abstract` keyword before the property declaration.",
			"4. Using the `static` keyword before the property declaration.",
		],
		answer: "1. Using the `override` keyword before the property declaration.",
	},
	{
		id: 23,
		title: "Q23. What is the purpose of the `lateinit` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It makes a variable immutable.",
			"2. It initializes a property at compile time.",
			"3. It allows a non-null property to be initialized later.",
			"4. It declares a property as a static property.",
		],
		answer: "3. It allows a non-null property to be initialized later.",
	},
	{
		id: 24,
		title: "Q24. What is the difference between `const` and `val` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `const` is used for compile-time constants, while `val` is used for runtime constants.",
			"2. `const` can be used with any data type, while `val` can only be used with primitive data types.",
			"3. `const` is used for mutable variables, while `val` is used for immutable variables.",
			"4. `const` and `val` are interchangeable; there is no difference.",
		],
		answer: "1. `const` is used for compile-time constants, while `val` is used for runtime constants.",
	},
	{
		id: 25,
		title: "Q25. What is a valid way to access a method of a class object in Kotlin?",
		text: undefined,
		code2: 'class Car(val model: String) { <br> fun startEngine() { <br> println("Engine started.") <br> } <br> }',
		choices: [
			"1. `Car.startEngine()`",
			'2. `val car = Car("Tesla"); car.startEngine()`',
			'3. `Car("Tesla").startEngine()`',
			"4. Both 2 and 3",
		],
		answer: "4. Both 2 and 3",
	},
	{
		id: 26,
		title: "Q26. What is the purpose of the `sealed` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It prevents a class from being subclassed.",
			"3. It restricts subclassing to a specific set of classes.",
			"4. It defines a class as a data class.",
		],
		answer: "3. It restricts subclassing to a specific set of classes.",
	},
	{
		id: 27,
		title: "Q27. What is the `is` operator used for in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To assign a value to a variable.",
			"2. To check if two objects are equal.",
			"3. To check if an object is of a specific type.",
			"4. To perform a safe cast operation.",
		],
		answer: "3. To check if an object is of a specific type.",
	},
	{
		id: 28,
		title: "Q28. What is the difference between `as` and `as?` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `as` performs a safe cast, while `as?` throws an exception if the cast fails.",
			"2. `as?` performs a safe cast, while `as` throws an exception if the cast fails.",
			"3. `as` and `as?` are equivalent; there is no difference.",
			"4. `as` is used for type checking, while `as?` is used for type casting.",
		],
		answer: "2. `as?` performs a safe cast, while `as` throws an exception if the cast fails.",
	},
	{
		id: 29,
		title: "Q29. What is the purpose of `object` declarations in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a class with a single instance.",
			"2. To define a static method for a class.",
			"3. To declare an abstract class.",
			"4. To define a data class.",
		],
		answer: "1. To create a class with a single instance.",
	},
	{
		id: 30,
		title: "Q30. What is the difference between `interface` and `abstract class` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `interface` can have constructor parameters, while `abstract class` cannot.",
			"2. `abstract class` can have non-abstract methods, while `interface` can only have abstract methods.",
			"3. `interface` can have only one parent, while `abstract class` can have multiple parents.",
			"4. `abstract class` can be instantiated directly, while `interface` cannot.",
		],
		answer: "2. `abstract class` can have non-abstract methods, while `interface` can only have abstract methods.",
	},
	{
		id: 31,
		title: "Q31. What is the `override` keyword used for in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To declare a variable as mutable.",
			"2. To mark a function or property as overriding a function or property from a superclass.",
			"3. To define a constructor for a class.",
			"4. To indicate that a method is abstract.",
		],
		answer: "2. To mark a function or property as overriding a function or property from a superclass.",
	},
	{
		id: 32,
		title: "Q32. What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 33,
		title: "Q33. What is the purpose of the `sealed` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It restricts subclassing to a specific set of classes.",
			"3. It prevents a class from being subclassed.",
			"4. It defines a class as a data class.",
		],
		answer: "2. It restricts subclassing to a specific set of classes.",
	},
	{
		id: 34,
		title: "Q34. What is the `super` keyword used for in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create an instance of a class.",
			"2. To define a constructor for a class.",
			"3. To call a method or access a property of the superclass.",
			"4. To declare a variable as immutable.",
		],
		answer: "3. To call a method or access a property of the superclass.",
	},
	{
		id: 35,
		title: "Q35. Which of the following is a valid way to declare a property in a Kotlin class?",
		text: undefined,
		code2: "class Person { <br> // ... <br> }",
		choices: [
			'1. `val name: String = "John"`',
			'2. `private val name: String = "John"`',
			'3. `var name: String = "John"`',
			"4. All of the above",
		],
		answer: "4. All of the above",
	},
	{
		id: 36,
		title: "Q36. What is a secondary constructor in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A constructor that is called only once.",
			"2. A constructor that is defined outside the class body.",
			"3. A constructor that is used to define static properties.",
			"4. A constructor that is defined within the class body and delegates to the primary constructor.",
		],
		answer: "4. A constructor that is defined within the class body and delegates to the primary constructor.",
	},
	{
		id: 37,
		title: "Q37. How do you define a companion object in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `companion object MyCompanion`",
			"2. `static object MyCompanion`",
			"3. `object MyCompanion`",
			"4. `companion class MyCompanion` ",
		],
		answer: "1. `companion object MyCompanion` ",
	},
	{
		id: 38,
		title: "Q38. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define the class constructor.",
			"2. To initialize the class properties.",
			"3. To create an instance of the class.",
			"4. To define a static method.",
		],
		answer: "2. To initialize the class properties.",
	},
	{
		id: 39,
		title: "Q39. What is the difference between an abstract class and an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. An interface can have constructor parameters, while an abstract class cannot.",
			"2. An abstract class can have non-abstract methods, while an interface can only have abstract methods.",
			"3. An interface can have only one parent, while an abstract class can have multiple parents.",
			"4. An abstract class can be instantiated directly, while an interface cannot.",
		],
		answer: "2. An abstract class can have non-abstract methods, while an interface can only have abstract methods.",
	},
	{
		id: 40,
		title: "Q40. Which of these is NOT a valid way to create an instance of a class in Kotlin?",
		text: undefined,
		code2: "class Person(val name: String) { <br> }",
		choices: [
			'1. `val person = Person("John")`',
			'2. `val person = Person(name = "John")`',
			'3. `val person = Person.new("John")`',
			'4. `val person: Person = Person("John")`',
		],
		answer: '3. `val person = Person.new("John")`',
	},
	{
		id: 41,
		title: "Q41. What is the purpose of the `open` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It allows a class to be subclassed.",
			"3. It defines a function as a property.",
			"4. It makes a variable immutable.",
		],
		answer: "2. It allows a class to be subclassed.",
	},
	{
		id: 42,
		title: "Q42. What is the difference between `as` and `as?` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `as` performs a safe cast, while `as?` throws an exception if the cast fails.",
			"2. `as?` performs a safe cast, while `as` throws an exception if the cast fails.",
			"3. `as` and `as?` are equivalent; there is no difference.",
			"4. `as` is used for type checking, while `as?` is used for type casting.",
		],
		answer: "2. `as?` performs a safe cast, while `as` throws an exception if the cast fails.",
	},
	{
		id: 43,
		title: "Q43. What is the difference between a primary constructor and a secondary constructor in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A primary constructor is defined in the class header, while a secondary constructor is defined in the class body.",
			"2. A primary constructor can have only one parameter, while a secondary constructor can have multiple parameters.",
			"3. A primary constructor must initialize all of the class's properties, while a secondary constructor does not have to initialize all of the class's properties.",
			"4. A primary constructor can only be called once, while a secondary constructor can be called multiple times.",
		],
		answer: "1. A primary constructor is defined in the class header, while a secondary constructor is defined in the class body.",
	},
	{
		id: 44,
		title: "Q44. How do you create an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `class MyInterface`",
			"2. `abstract class MyInterface`",
			"3. `sealed class MyInterface`",
			"4. `interface MyInterface` ",
		],
		answer: "4. `interface MyInterface` ",
	},
	{
		id: 45,
		title: "Q45. What is the main purpose of a data class in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define a class that can be used as a data structure.",
			"2. To provide a class with automatically generated methods for data manipulation.",
			"3. To create instances of other classes.",
			"4. To define a class that has static methods.",
		],
		answer: "2. To provide a class with automatically generated methods for data manipulation.",
	},
	{
		id: 46,
		title: "Q46. What is the meaning of the `override` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines a method as a property.",
			"2. It makes a variable immutable.",
			"3. It indicates that a method is overriding a method from a superclass.",
			"4. It defines a constructor for a class.",
		],
		answer: "3. It indicates that a method is overriding a method from a superclass.",
	},
	{
		id: 47,
		title: "Q47. How do you override a property in Kotlin?",
		text: undefined,
		code2: "open class Animal { <br> var age: Int = 0 <br> } <br> class Dog : Animal() { <br> // ... <br> }",
		choices: [
			"1. Using the `override` keyword before the property declaration.",
			"2. Using the `final` keyword before the property declaration.",
			"3. Using the `abstract` keyword before the property declaration.",
			"4. Using the `static` keyword before the property declaration.",
		],
		answer: "1. Using the `override` keyword before the property declaration.",
	},
	{
		id: 48,
		title: "Q48. What is the purpose of the `lateinit` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It makes a variable immutable.",
			"2. It initializes a property at compile time.",
			"3. It allows a non-null property to be initialized later.",
			"4. It declares a property as a static property.",
		],
		answer: "3. It allows a non-null property to be initialized later.",
	},
	{
		id: 49,
		title: "Q49. What is the difference between `const` and `val` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `const` is used for compile-time constants, while `val` is used for runtime constants.",
			"2. `const` can be used with any data type, while `val` can only be used with primitive data types.",
			"3. `const` is used for mutable variables, while `val` is used for immutable variables.",
			"4. `const` and `val` are interchangeable; there is no difference.",
		],
		answer: "1. `const` is used for compile-time constants, while `val` is used for runtime constants.",
	},
	{
		id: 50,
		title: "Q50. What is a valid way to access a method of a class object in Kotlin?",
		text: undefined,
		code2: 'class Car(val model: String) { <br> fun startEngine() { <br> println("Engine started.") <br> } <br> }',
		choices: [
			"1. `Car.startEngine()`",
			'2. `val car = Car("Tesla"); car.startEngine()`',
			'3. `Car("Tesla").startEngine()`',
			"4. Both 2 and 3",
		],
		answer: "4. Both 2 and 3",
	},
	{
		id: 51,
		title: "Q51. What is the purpose of the `sealed` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It prevents a class from being subclassed.",
			"3. It restricts subclassing to a specific set of classes.",
			"4. It defines a class as a data class.",
		],
		answer: "3. It restricts subclassing to a specific set of classes.",
	},
	{
		id: 52,
		title: "Q52. What is the `is` operator used for in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To assign a value to a variable.",
			"2. To check if two objects are equal.",
			"3. To check if an object is of a specific type.",
			"4. To perform a safe cast operation.",
		],
		answer: "3. To check if an object is of a specific type.",
	},
	{
		id: 53,
		title: "Q53.  How do you define a property that can only be changed within the class itself (private setter) in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `var name: String = "John"`',
			'2. `val name: String = "John"`',
			'3. `private val name: String = "John"`',
			'4. `var name: String = "John" private set` ',
		],
		answer: '4. `var name: String = "John" private set` ',
	},

	{
		id: 55,
		title: "Q55. How do you declare a class as final in Kotlin, preventing it from being subclassed?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `final class MyClass`",
			"2. `sealed class MyClass`",
			"3. `private class MyClass`",
			"4. `abstract class MyClass` ",
		],
		answer: "1. `final class MyClass`",
	},
	{
		id: 56,
		title: "Q56. What is the difference between using `interface` and `abstract class` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `interface` can only have abstract methods, while `abstract class` can have both abstract and non-abstract methods.",
			"2. `interface` can have properties with implementations, while `abstract class` can only have abstract properties.",
			"3. `interface` can be instantiated directly, while `abstract class` cannot.",
			"4. `interface` can only inherit from one parent, while `abstract class` can inherit from multiple parents.",
		],
		answer: "1. `interface` can only have abstract methods, while `abstract class` can have both abstract and non-abstract methods.",
	},
	{
		id: 57,
		title: "Q57.  What is the main purpose of a `data class` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define a class that can be used as a data structure.",
			"2. To provide a class with automatically generated methods for data manipulation.",
			"3. To create instances of other classes.",
			"4. To define a class that has static methods.",
		],
		answer: "2. To provide a class with automatically generated methods for data manipulation.",
	},
	{
		id: 58,
		title: "Q58.  Which keyword in Kotlin is used to define a property that can only be accessed within the class itself (private access modifier)?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `public`",
			"2. `protected`",
			"3. `internal`",
			"4. `private` ",
		],
		answer: "4. `private` ",
	},
	{
		id: 59,
		title: "Q59. How do you declare a property in a Kotlin class that can be accessed from any subclass?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `private val name: String = "John"`',
			'2. `protected val name: String = "John"`',
			'3. `internal val name: String = "John"`',
			'4. `public val name: String = "John"` ',
		],
		answer: '2. `protected val name: String = "John"`',
	},
	{
		id: 60,
		title: "Q60. What is the purpose of the `super` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create an instance of a class.",
			"2. To define a constructor for a class.",
			"3. To call a method or access a property of the superclass.",
			"4. To declare a variable as immutable.",
		],
		answer: "3. To call a method or access a property of the superclass.",
	},
	{
		id: 61,
		title: "Q61.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 62,
		title: "Q62. What is the role of `abstract` methods in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. They are methods that are not implemented in the class.",
			"2. They are methods that are called only once.",
			"3. They are methods that are private to the class.",
			"4. They are methods that are only used in interfaces.",
		],
		answer: "1. They are methods that are not implemented in the class.",
	},
	{
		id: 63,
		title: "Q63. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
	{
		id: 64,
		title: "Q64. How do you override a method in a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Animal { <br> fun makeSound() { println("Generic animal sound") } <br> } <br> class Dog : Animal() { <br> // ... <br> }',
		choices: [
			"1. Use the `override` keyword before the method declaration.",
			"2. Use the `final` keyword before the method declaration.",
			"3. Use the `abstract` keyword before the method declaration.",
			"4. Use the `static` keyword before the method declaration.",
		],
		answer: "1. Use the `override` keyword before the method declaration.",
	},
	{
		id: 65,
		title: "Q65. What is the difference between using `interface` and `abstract class` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `interface` can only have abstract methods, while `abstract class` can have both abstract and non-abstract methods.",
			"2. `interface` can have properties with implementations, while `abstract class` can only have abstract properties.",
			"3. `interface` can be instantiated directly, while `abstract class` cannot.",
			"4. `interface` can only inherit from one parent, while `abstract class` can inherit from multiple parents.",
		],
		answer: "1. `interface` can only have abstract methods, while `abstract class` can have both abstract and non-abstract methods.",
	},
	{
		id: 66,
		title: "Q66. Which of these is NOT a valid way to create an instance of a class in Kotlin?",
		text: undefined,
		code2: "class Person(val name: String) { <br> }",
		choices: [
			'1. `val person = Person("John")`',
			'2. `val person = Person(name = "John")`',
			'3. `val person = Person.new("John")`',
			'4. `val person: Person = Person("John")`',
		],
		answer: '3. `val person = Person.new("John")`',
	},
	{
		id: 67,
		title: "Q67. How do you define a companion object in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `companion object MyCompanion`",
			"2. `static object MyCompanion`",
			"3. `object MyCompanion`",
			"4. `companion class MyCompanion` ",
		],
		answer: "1. `companion object MyCompanion` ",
	},
	{
		id: 68,
		title: "Q68. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
	{
		id: 69,
		title: "Q69. How do you access a property of the superclass from a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Shape { <br> val color: String = "Red" <br> } <br> class Circle : Shape() { <br> // ... <br> }',
		choices: [
			"1. `Shape.color`",
			"2. `super.color`",
			"3. `this.color`",
			"4. `Circle.color`",
		],
		answer: "2. `super.color`",
	},
	{
		id: 70,
		title: "Q70. What is the difference between an abstract class and an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. An interface can have constructor parameters, while an abstract class cannot.",
			"2. An abstract class can have non-abstract methods, while an interface can only have abstract methods.",
			"3. An interface can have only one parent, while an abstract class can have multiple parents.",
			"4. An abstract class can be instantiated directly, while an interface cannot.",
		],
		answer: "2. An abstract class can have non-abstract methods, while an interface can only have abstract methods.",
	},
	{
		id: 71,
		title: "Q71. How do you declare an abstract class in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. Using the `abstract` keyword before the class declaration.",
			"2. Using the `final` keyword before the class declaration.",
			"3. Using the `sealed` keyword before the class declaration.",
			"4. Using the `interface` keyword before the class declaration.",
		],
		answer: "1. Using the `abstract` keyword before the class declaration.",
	},
	{
		id: 72,
		title: "Q72. What is the purpose of the `data` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines a class that can hold only immutable data.",
			"2. It defines a class that has automatically generated equals(), hashCode(), toString(), and copy() methods.",
			"3. It defines a class that can be used as a data structure.",
			"4. It defines a class that is specifically designed for Android development.",
		],
		answer: "2. It defines a class that has automatically generated equals(), hashCode(), toString(), and copy() methods.",
	},
	{
		id: 73,
		title: "Q73. Which of these is a valid way to declare an interface in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `class Animal`",
			"2. `abstract class Animal`",
			"3. `sealed class Animal`",
			"4. `interface Animal` ",
		],
		answer: "4. `interface Animal` ",
	},
	{
		id: 74,
		title: "Q74. What is the meaning of the `override` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines a method as a property.",
			"2. It makes a variable immutable.",
			"3. It indicates that a method is overriding a method from a superclass.",
			"4. It defines a constructor for a class.",
		],
		answer: "3. It indicates that a method is overriding a method from a superclass.",
	},
	{
		id: 75,
		title: "Q75. What is the difference between a `val` and a `var` property in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A `val` property is immutable, while a `var` property is mutable.",
			"2. A `val` property can be initialized later, while a `var` property must be initialized immediately.",
			"3. A `val` property can be accessed from any part of the code, while a `var` property can only be accessed from within the class.",
			"4. There is no difference; `val` and `var` are interchangeable.",
		],
		answer: "1. A `val` property is immutable, while a `var` property is mutable.",
	},
	{
		id: 76,
		title: "Q76. Which of the following is a valid way to declare a property in a Kotlin class?",
		text: undefined,
		code2: "class Person { <br> // ... <br> }",
		choices: [
			'1. `val name: String = "John"`',
			'2. `private val name: String = "John"`',
			'3. `var name: String = "John"`',
			"4. All of the above",
		],
		answer: "4. All of the above",
	},
	{
		id: 77,
		title: "Q77. What is the purpose of the `super` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It creates an instance of a class.",
			"2. It defines a constructor for a class.",
			"3. It calls a method or accesses a property of the superclass.",
			"4. It declares a variable as immutable.",
		],
		answer: "3. It calls a method or accesses a property of the superclass.",
	},
	{
		id: 78,
		title: "Q78. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
	{
		id: 79,
		title: "Q79. How do you override a method in a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Animal { <br> fun makeSound() { println("Generic animal sound") } <br> } <br> class Dog : Animal() { <br> // ... <br> }',
		choices: [
			"1. Use the `override` keyword before the method declaration.",
			"2. Use the `final` keyword before the method declaration.",
			"3. Use the `abstract` keyword before the method declaration.",
			"4. Use the `static` keyword before the method declaration.",
		],
		answer: "1. Use the `override` keyword before the method declaration.",
	},
	{
		id: 80,
		title: "Q80.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A `val` property is immutable, while a `var` property is mutable.",
			"2. A `val` property can be initialized later, while a `var` property must be initialized immediately.",
			"3. A `val` property can be accessed from any part of the code, while a `var` property can only be accessed from within the class.",
			"4. There is no difference; `val` and `var` are interchangeable.",
		],
		answer: "1. A `val` property is immutable, while a `var` property is mutable.",
	},
	{
		id: 81,
		title: "Q81.  Which of the following is a valid way to declare a property in a Kotlin class?",
		text: undefined,
		code2: "class Person { <br> // ... <br> }",
		choices: [
			'1. `val name: String = "John"`',
			'2. `private val name: String = "John"`',
			'3. `var name: String = "John"`',
			"4. All of the above",
		],
		answer: "4. All of the above",
	},
	{
		id: 82,
		title: "Q82. What is the purpose of the `super` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It creates an instance of a class.",
			"2. It defines a constructor for a class.",
			"3. It calls a method or accesses a property of the superclass.",
			"4. It declares a variable as immutable.",
		],
		answer: "3. It calls a method or accesses a property of the superclass.",
	},
	{
		id: 83,
		title: "Q83.  How do you define a property that can only be changed within the class itself (private setter) in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `var name: String = "John"`',
			'2. `val name: String = "John"`',
			'3. `private val name: String = "John"`',
			'4. `var name: String = "John" private set` ',
		],
		answer: '4. `var name: String = "John" private set` ',
	},
	{
		id: 84,
		title: "Q84. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
	{
		id: 85,
		title: "Q85. How do you override a method in a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Animal { <br> fun makeSound() { println("Generic animal sound") } <br> } <br> class Dog : Animal() { <br> // ... <br> }',
		choices: [
			"1. Use the `override` keyword before the method declaration.",
			"2. Use the `final` keyword before the method declaration.",
			"3. Use the `abstract` keyword before the method declaration.",
			"4. Use the `static` keyword before the method declaration.",
		],
		answer: "1. Use the `override` keyword before the method declaration.",
	},
	{
		id: 86,
		title: "Q86.  What is the purpose of the `sealed` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It prevents a class from being subclassed.",
			"3. It restricts subclassing to a specific set of classes.",
			"4. It defines a class as a data class.",
		],
		answer: "3. It restricts subclassing to a specific set of classes.",
	},
	{
		id: 87,
		title: "Q87.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. A `val` property is immutable, while a `var` property is mutable.",
			"2. A `val` property can be initialized later, while a `var` property must be initialized immediately.",
			"3. A `val` property can be accessed from any part of the code, while a `var` property can only be accessed from within the class.",
			"4. There is no difference; `val` and `var` are interchangeable.",
		],
		answer: "1. A `val` property is immutable, while a `var` property is mutable.",
	},
	{
		id: 88,
		title: "Q88. What is the difference between using `interface` and `abstract class` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `interface` can only have abstract methods, while `abstract class` can have both abstract and non-abstract methods.",
			"2. `interface` can have properties with implementations, while `abstract class` can only have abstract properties.",
			"3. `interface` can be instantiated directly, while `abstract class` cannot.",
			"4. `interface` can only inherit from one parent, while `abstract class` can inherit from multiple parents.",
		],
		answer: "1. `interface` can only have abstract methods, while `abstract class` can have both abstract and non-abstract methods.",
	},
	{
		id: 89,
		title: "Q89. Which of these is NOT a valid way to create an instance of a class in Kotlin?",
		text: undefined,
		code2: "class Person(val name: String) { <br> }",
		choices: [
			'1. `val person = Person("John")`',
			'2. `val person = Person(name = "John")`',
			'3. `val person = Person.new("John")`',
			'4. `val person: Person = Person("John")`',
		],
		answer: '3. `val person = Person.new("John")`',
	},
	{
		id: 90,
		title: "Q90.  How do you define a companion object in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `companion object MyCompanion`",
			"2. `static object MyCompanion`",
			"3. `object MyCompanion`",
			"4. `companion class MyCompanion` ",
		],
		answer: "1. `companion object MyCompanion` ",
	},
	{
		id: 91,
		title: "Q91. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
	{
		id: 92,
		title: "Q92. How do you access a property of the superclass from a subclass in Kotlin?",
		text: undefined,
		code2: 'open class Shape { <br> val color: String = "Red" <br> } <br> class Circle : Shape() { <br> // ... <br> }',
		choices: [
			"1. `Shape.color`",
			"2. `super.color`",
			"3. `this.color`",
			"4. `Circle.color`",
		],
		answer: "2. `super.color`",
	},
	{
		id: 93,
		title: "Q93. How do you override a property in Kotlin?",
		text: undefined,
		code2: "open class Animal { <br> var age: Int = 0 <br> } <br> class Dog : Animal() { <br> // ... <br> }",
		choices: [
			"1. Using the `override` keyword before the property declaration.",
			"2. Using the `final` keyword before the property declaration.",
			"3. Using the `abstract` keyword before the property declaration.",
			"4. Using the `static` keyword before the property declaration.",
		],
		answer: "1. Using the `override` keyword before the property declaration.",
	},
	{
		id: 94,
		title: "Q94. What is the purpose of the `lateinit` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It makes a variable immutable.",
			"2. It initializes a property at compile time.",
			"3. It allows a non-null property to be initialized later.",
			"4. It declares a property as a static property.",
		],
		answer: "3. It allows a non-null property to be initialized later.",
	},
	{
		id: 95,
		title: "Q95. What is the difference between `const` and `val` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `const` is used for compile-time constants, while `val` is used for runtime constants.",
			"2. `const` can be used with any data type, while `val` can only be used with primitive data types.",
			"3. `const` is used for mutable variables, while `val` is used for immutable variables.",
			"4. `const` and `val` are interchangeable; there is no difference.",
		],
		answer: "1. `const` is used for compile-time constants, while `val` is used for runtime constants.",
	},
	{
		id: 96,
		title: "Q96. What is a valid way to access a method of a class object in Kotlin?",
		text: undefined,
		code2: 'class Car(val model: String) { <br> fun startEngine() { <br> println("Engine started.") <br> } <br> }',
		choices: [
			"1. `Car.startEngine()`",
			'2. `val car = Car("Tesla"); car.startEngine()`',
			'3. `Car("Tesla").startEngine()`',
			"4. Both 2 and 3",
		],
		answer: "4. Both 2 and 3",
	},
	{
		id: 97,
		title: "Q97. What is the purpose of the `sealed` keyword in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a class as abstract.",
			"2. It prevents a class from being subclassed.",
			"3. It restricts subclassing to a specific set of classes.",
			"4. It defines a class as a data class.",
		],
		answer: "3. It restricts subclassing to a specific set of classes.",
	},
	{
		id: 98,
		title: "Q98. What is the `is` operator used for in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To assign a value to a variable.",
			"2. To check if two objects are equal.",
			"3. To check if an object is of a specific type.",
			"4. To perform a safe cast operation.",
		],
		answer: "3. To check if an object is of a specific type.",
	},
	{
		id: 99,
		title: "Q99.  How do you define a property that can only be changed within the class itself (private setter) in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `var name: String = "John"`',
			'2. `val name: String = "John"`',
			'3. `private val name: String = "John"`',
			'4. `var name: String = "John" private set` ',
		],
		answer: '4. `var name: String = "John" private set` ',
	},
	{
		id: 100,
		title: "Q100. What is the purpose of the `init` block in a Kotlin class?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It defines the class constructor.",
			"2. It initializes the class properties.",
			"3. It is used to create an instance of the class.",
			"4. It defines a static method.",
		],
		answer: "2. It initializes the class properties.",
	},
];

let jetpackCompose = [
	{
		id: 4,
		title: "Q4. How do you create a simple `Text` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `TextView text = new TextView(context)`",
			'2. `val text = Text("Hello, world!")`',
			'3. `Text.setText("Hello, world!")`',
			'4. `val text = TextView("Hello, world!")`',
		],
		answer: '2. `val text = Text("Hello, world!")`',
	},
	{
		id: 5,
		title: "Q5. What is the purpose of the `@Composable` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a view.",
			"2. It marks a function as a layout.",
			"3. It marks a function as a composable function.",
			"4. It marks a function as a state-holding function.",
		],
		answer: "3. It marks a function as a composable function.",
	},
	{
		id: 6,
		title: "Q6. What is the role of `Modifier` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define the layout parameters of a composable.",
			"2. To manage the state of a composable.",
			"3. To handle user interactions with a composable.",
			"4. To define the theme of a composable.",
		],
		answer: "1. To define the layout parameters of a composable.",
	},
	{
		id: 7,
		title: "Q7. How do you add a `padding` to a composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Text("Hello", padding = 16.dp)`',
			'2. `Text("Hello").setPadding(16.dp)`',
			'3. `Text("Hello", Modifier.padding(16.dp))`',
			'4. `Text("Hello").apply { padding = 16.dp }`',
		],
		answer: '3. `Text("Hello", Modifier.padding(16.dp))`',
	},
	{
		id: 8,
		title: "Q8. How do you create a simple `Column` layout in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Column { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'2. `LinearLayout.vertical { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'3. `val column = Column() <br> column.addView(Text("Item 1")) <br> column.addView(Text("Item 2"))`',
			'4. `val column = Column(Text("Item 1"), Text("Item 2"))`',
		],
		answer: '1. `Column { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
	},
	{
		id: 9,
		title: "Q9. How do you create a simple `Row` layout in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Row { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'2. `LinearLayout.horizontal { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'3. `val row = Row() <br> row.addView(Text("Item 1")) <br> row.addView(Text("Item 2"))`',
			'4. `val row = Row(Text("Item 1"), Text("Item 2"))`',
		],
		answer: '1. `Row { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
	},
	{
		id: 10,
		title: "Q10. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 11,
		title: "Q11. How do you define a state variable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `var count = 0`",
			"2. `val count = mutableStateOf(0)`",
			"3. `val count = remember { 0 }`",
			"4. `val count = state { 0 }`",
		],
		answer: "4. `val count = state { 0 }`",
	},
	{
		id: 12,
		title: "Q12. How do you update a state variable in Jetpack Compose?",
		text: undefined,
		code2: "val count = state { 0 }",
		choices: [
			"1. `count = count + 1`",
			"2. `count.value = count.value + 1`",
			"3. `count.plusAssign(1)`",
			"4. `count.update { it + 1 }`",
		],
		answer: "4. `count.update { it + 1 }`",
	},
	{
		id: 13,
		title: "Q13. How do you create a simple button in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Button { <br> // Action <br> }`",
			"2. `val button = Button() <br> button.setOnClickListener { <br> // Action <br> }`",
			"3. `Button.onClick { <br> // Action <br> }`",
			"4. `val button = Button(onClick = { <br> // Action <br> })`",
		],
		answer: "1. `Button { <br> // Action <br> }`",
	},
	{
		id: 14,
		title: "Q14. How do you create a simple `LazyColumn` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyColumn = LazyColumn() <br> lazyColumn.adapter = // Adapter with items <br>`",
			"4. `val lazyColumn = LazyColumn(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 15,
		title: "Q15. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 16,
		title: "Q16. What is the purpose of the `@Preview` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a composable.",
			"2. It defines a preview of a composable in the layout editor.",
			"3. It creates a preview of a composable in the Android Studio preview pane.",
			"4. Both 2 and 3.",
		],
		answer: "4. Both 2 and 3.",
	},
	{
		id: 17,
		title: "Q17. How do you use a `MaterialTheme` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `MaterialTheme.applyTo(this)`",
			"2. `val theme = MaterialTheme() <br> theme.applyTo(this)`",
			"3. `MaterialTheme { <br> // Composable content <br> }`",
			"4. `setTheme(MaterialTheme)`",
		],
		answer: "3. `MaterialTheme { <br> // Composable content <br> }`",
	},
	{
		id: 18,
		title: "Q18. How do you create a simple `LazyRow` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyRow = LazyRow() <br> lazyRow.adapter = // Adapter with items <br>`",
			"4. `val lazyRow = LazyRow(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 19,
		title: "Q19. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 20,
		title: "Q20. How do you define a state variable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `var count = 0`",
			"2. `val count = mutableStateOf(0)`",
			"3. `val count = remember { 0 }`",
			"4. `val count = state { 0 }`",
		],
		answer: "4. `val count = state { 0 }`",
	},
	{
		id: 21,
		title: "Q21. How do you update a state variable in Jetpack Compose?",
		text: undefined,
		code2: "val count = state { 0 }",
		choices: [
			"1. `count = count + 1`",
			"2. `count.value = count.value + 1`",
			"3. `count.plusAssign(1)`",
			"4. `count.update { it + 1 }`",
		],
		answer: "4. `count.update { it + 1 }`",
	},
	{
		id: 22,
		title: "Q22. How do you create a simple button in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Button { <br> // Action <br> }`",
			"2. `val button = Button() <br> button.setOnClickListener { <br> // Action <br> }`",
			"3. `Button.onClick { <br> // Action <br> }`",
			"4. `val button = Button(onClick = { <br> // Action <br> })`",
		],
		answer: "1. `Button { <br> // Action <br> }`",
	},
	{
		id: 23,
		title: "Q23. How do you create a simple `LazyColumn` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyColumn = LazyColumn() <br> lazyColumn.adapter = // Adapter with items <br>`",
			"4. `val lazyColumn = LazyColumn(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 24,
		title: "Q24. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 25,
		title: "Q25. What is the purpose of the `@Preview` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a composable.",
			"2. It defines a preview of a composable in the layout editor.",
			"3. It creates a preview of a composable in the Android Studio preview pane.",
			"4. Both 2 and 3.",
		],
		answer: "4. Both 2 and 3.",
	},
	{
		id: 26,
		title: "Q26. How do you use a `MaterialTheme` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `MaterialTheme.applyTo(this)`",
			"2. `val theme = MaterialTheme() <br> theme.applyTo(this)`",
			"3. `MaterialTheme { <br> // Composable content <br> }`",
			"4. `setTheme(MaterialTheme)`",
		],
		answer: "3. `MaterialTheme { <br> // Composable content <br> }`",
	},
	{
		id: 27,
		title: "Q27. How do you create a simple `LazyRow` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyRow = LazyRow() <br> lazyRow.adapter = // Adapter with items <br>`",
			"4. `val lazyRow = LazyRow(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 28,
		title: "Q28. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 29,
		title: "Q29. How do you define a state variable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `var count = 0`",
			"2. `val count = mutableStateOf(0)`",
			"3. `val count = remember { 0 }`",
			"4. `val count = state { 0 }`",
		],
		answer: "4. `val count = state { 0 }`",
	},
	{
		id: 30,
		title: "Q30. How do you update a state variable in Jetpack Compose?",
		text: undefined,
		code2: "val count = state { 0 }",
		choices: [
			"1. `count = count + 1`",
			"2. `count.value = count.value + 1`",
			"3. `count.plusAssign(1)`",
			"4. `count.update { it + 1 }`",
		],
		answer: "4. `count.update { it + 1 }`",
	},
	{
		id: 31,
		title: "Q31. How do you create a simple button in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Button { <br> // Action <br> }`",
			"2. `val button = Button() <br> button.setOnClickListener { <br> // Action <br> }`",
			"3. `Button.onClick { <br> // Action <br> }`",
			"4. `val button = Button(onClick = { <br> // Action <br> })`",
		],
		answer: "1. `Button { <br> // Action <br> }`",
	},
	{
		id: 32,
		title: "Q32. How do you create a simple `LazyColumn` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyColumn = LazyColumn() <br> lazyColumn.adapter = // Adapter with items <br>`",
			"4. `val lazyColumn = LazyColumn(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 33,
		title: "Q33. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 34,
		title: "Q34. What is the purpose of the `@Preview` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a composable.",
			"2. It defines a preview of a composable in the layout editor.",
			"3. It creates a preview of a composable in the Android Studio preview pane.",
			"4. Both 2 and 3.",
		],
		answer: "4. Both 2 and 3.",
	},
	{
		id: 35,
		title: "Q35. How do you use a `MaterialTheme` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `MaterialTheme.applyTo(this)`",
			"2. `val theme = MaterialTheme() <br> theme.applyTo(this)`",
			"3. `MaterialTheme { <br> // Composable content <br> }`",
			"4. `setTheme(MaterialTheme)`",
		],
		answer: "3. `MaterialTheme { <br> // Composable content <br> }`",
	},
	{
		id: 36,
		title: "Q36. How do you create a simple `LazyRow` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyRow = LazyRow() <br> lazyRow.adapter = // Adapter with items <br>`",
			"4. `val lazyRow = LazyRow(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 37,
		title: "Q37.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 38,
		title: "Q38. What is the purpose of the `@Composable` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a view.",
			"2. It marks a function as a layout.",
			"3. It marks a function as a composable function.",
			"4. It marks a function as a state-holding function.",
		],
		answer: "3. It marks a function as a composable function.",
	},
	{
		id: 39,
		title: "Q39.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 40,
		title: "Q40. What is the role of `Modifier` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define the layout parameters of a composable.",
			"2. To manage the state of a composable.",
			"3. To handle user interactions with a composable.",
			"4. To define the theme of a composable.",
		],
		answer: "1. To define the layout parameters of a composable.",
	},
	{
		id: 41,
		title: "Q41. How do you add a `padding` to a composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Text("Hello", padding = 16.dp)`',
			'2. `Text("Hello").setPadding(16.dp)`',
			'3. `Text("Hello", Modifier.padding(16.dp))`',
			'4. `Text("Hello").apply { padding = 16.dp }`',
		],
		answer: '3. `Text("Hello", Modifier.padding(16.dp))`',
	},
	{
		id: 42,
		title: "Q42.  How do you define a property that can only be changed within the class itself (private setter) in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `var name: String = "John"`',
			'2. `val name: String = "John"`',
			'3. `private val name: String = "John"`',
			'4. `var name: String = "John" private set` ',
		],
		answer: '4. `var name: String = "John" private set` ',
	},
	{
		id: 43,
		title: "Q43.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 44,
		title: "Q44. What is the purpose of the `@Composable` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a view.",
			"2. It marks a function as a layout.",
			"3. It marks a function as a composable function.",
			"4. It marks a function as a state-holding function.",
		],
		answer: "3. It marks a function as a composable function.",
	},
	{
		id: 45,
		title: "Q45. What is the difference between `as` and `as?` in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `as` performs a safe cast, while `as?` throws an exception if the cast fails.",
			"2. `as?` performs a safe cast, while `as` throws an exception if the cast fails.",
			"3. `as` and `as?` are equivalent; there is no difference.",
			"4. `as` is used for type checking, while `as?` is used for type casting.",
		],
		answer: "2. `as?` performs a safe cast, while `as` throws an exception if the cast fails.",
	},
	{
		id: 46,
		title: "Q46. How do you create a simple `Column` layout in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Column { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'2. `LinearLayout.vertical { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'3. `val column = Column() <br> column.addView(Text("Item 1")) <br> column.addView(Text("Item 2"))`',
			'4. `val column = Column(Text("Item 1"), Text("Item 2"))`',
		],
		answer: '1. `Column { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
	},
	{
		id: 47,
		title: "Q47. What is the purpose of the `@Composable` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a view.",
			"2. It marks a function as a layout.",
			"3. It marks a function as a composable function.",
			"4. It marks a function as a state-holding function.",
		],
		answer: "3. It marks a function as a composable function.",
	},
	{
		id: 48,
		title: "Q48. What is the role of `Modifier` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To define the layout parameters of a composable.",
			"2. To manage the state of a composable.",
			"3. To handle user interactions with a composable.",
			"4. To define the theme of a composable.",
		],
		answer: "1. To define the layout parameters of a composable.",
	},
	{
		id: 49,
		title: "Q49. How do you add a `padding` to a composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Text("Hello", padding = 16.dp)`',
			'2. `Text("Hello").setPadding(16.dp)`',
			'3. `Text("Hello", Modifier.padding(16.dp))`',
			'4. `Text("Hello").apply { padding = 16.dp }`',
		],
		answer: '3. `Text("Hello", Modifier.padding(16.dp))`',
	},
	{
		id: 51,
		title: "Q51. How do you create a simple `Row` layout in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `Row { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'2. `LinearLayout.horizontal { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
			'3. `val row = Row() <br> row.addView(Text("Item 1")) <br> row.addView(Text("Item 2"))`',
			'4. `val row = Row(Text("Item 1"), Text("Item 2"))`',
		],
		answer: '1. `Row { <br> Text("Item 1") <br> Text("Item 2") <br> }`',
	},
	{
		id: 52,
		title: "Q52. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 53,
		title: "Q53. How do you define a state variable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `var count = 0`",
			"2. `val count = mutableStateOf(0)`",
			"3. `val count = remember { 0 }`",
			"4. `val count = state { 0 }`",
		],
		answer: "4. `val count = state { 0 }`",
	},
	{
		id: 54,
		title: "Q54. How do you update a state variable in Jetpack Compose?",
		text: undefined,
		code2: "val count = state { 0 }",
		choices: [
			"1. `count = count + 1`",
			"2. `count.value = count.value + 1`",
			"3. `count.plusAssign(1)`",
			"4. `count.update { it + 1 }`",
		],
		answer: "4. `count.update { it + 1 }`",
	},
	{
		id: 55,
		title: "Q55. How do you create a simple button in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Button { <br> // Action <br> }`",
			"2. `val button = Button() <br> button.setOnClickListener { <br> // Action <br> }`",
			"3. `Button.onClick { <br> // Action <br> }`",
			"4. `val button = Button(onClick = { <br> // Action <br> })`",
		],
		answer: "1. `Button { <br> // Action <br> }`",
	},
	{
		id: 56,
		title: "Q56. How do you create a simple `LazyColumn` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyColumn = LazyColumn() <br> lazyColumn.adapter = // Adapter with items <br>`",
			"4. `val lazyColumn = LazyColumn(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyColumn { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 57,
		title: "Q57. What is the purpose of the `remember` function in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To create a new instance of a composable.",
			"2. To store a value in memory so it can be reused.",
			"3. To define a state variable.",
			"4. To handle user interactions.",
		],
		answer: "2. To store a value in memory so it can be reused.",
	},
	{
		id: 58,
		title: "Q58. What is the purpose of the `@Preview` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a composable.",
			"2. It defines a preview of a composable in the layout editor.",
			"3. It creates a preview of a composable in the Android Studio preview pane.",
			"4. Both 2 and 3.",
		],
		answer: "4. Both 2 and 3.",
	},
	{
		id: 59,
		title: "Q59. How do you use a `MaterialTheme` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `MaterialTheme.applyTo(this)`",
			"2. `val theme = MaterialTheme() <br> theme.applyTo(this)`",
			"3. `MaterialTheme { <br> // Composable content <br> }`",
			"4. `setTheme(MaterialTheme)`",
		],
		answer: "3. `MaterialTheme { <br> // Composable content <br> }`",
	},
	{
		id: 60,
		title: "Q60. How do you create a simple `LazyRow` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyRow = LazyRow() <br> lazyRow.adapter = // Adapter with items <br>`",
			"4. `val lazyRow = LazyRow(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 61,
		title: "Q61. How do you create a simple `Card` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Card { <br> // Composable content <br> }`",
			"2. `val card = Card() <br> card.addView(// Composable content)`",
			"3. `Card.setContent { <br> // Composable content <br> }`",
			"4. `val card = Card(content = { <br> // Composable content <br> })`",
		],
		answer: "1. `Card { <br> // Composable content <br> }`",
	},
	{
		id: 62,
		title: "Q62. What is the difference between `remember` and `mutableStateOf` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
			"2. `mutableStateOf` is used for storing values, while `remember` is used for defining state variables.",
			"3. `remember` and `mutableStateOf` are interchangeable.",
			"4. `remember` is used for creating composables, while `mutableStateOf` is used for updating composables.",
		],
		answer: "1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
	},
	{
		id: 63,
		title: "Q63. What is the purpose of the `LaunchedEffect` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To perform side effects, like network calls or database updates, within a composable.",
			"2. To define animations and transitions in a composable.",
			"3. To create a preview of a composable in the Android Studio preview pane.",
			"4. To handle user interactions with a composable.",
		],
		answer: "1. To perform side effects, like network calls or database updates, within a composable.",
	},
	{
		id: 64,
		title: "Q64. How do you create a simple `Image` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `ImageView image = new ImageView(context)`",
			'2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
			"3. `Image.setImageResource(// Drawable resource)`",
			'4. `val image = ImageView(// Drawable resource, contentDescription = "Image description")`',
		],
		answer: '2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
	},
	{
		id: 65,
		title: "Q65. What is the difference between `remember` and `mutableStateOf` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
			"2. `mutableStateOf` is used for storing values, while `remember` is used for defining state variables.",
			"3. `remember` and `mutableStateOf` are interchangeable.",
			"4. `remember` is used for creating composables, while `mutableStateOf` is used for updating composables.",
		],
		answer: "1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
	},
	{
		id: 66,
		title: "Q66. How do you create a simple `Scaffold` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Scaffold { <br> // Composable content <br> }`",
			"2. `val scaffold = Scaffold() <br> scaffold.setContent { <br> // Composable content <br> }`",
			"3. `Scaffold.setContent { <br> // Composable content <br> }`",
			"4. `val scaffold = Scaffold(content = { <br> // Composable content <br> })`",
		],
		answer: "1. `Scaffold { <br> // Composable content <br> }`",
	},
	{
		id: 67,
		title: "Q67. What is the purpose of the `LaunchedEffect` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To perform side effects, like network calls or database updates, within a composable.",
			"2. To define animations and transitions in a composable.",
			"3. To create a preview of a composable in the Android Studio preview pane.",
			"4. To handle user interactions with a composable.",
		],
		answer: "1. To perform side effects, like network calls or database updates, within a composable.",
	},
	{
		id: 68,
		title: "Q68. How do you create a simple `Image` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `ImageView image = new ImageView(context)`",
			'2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
			"3. `Image.setImageResource(// Drawable resource)`",
			'4. `val image = ImageView(// Drawable resource, contentDescription = "Image description")`',
		],
		answer: '2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
	},
	{
		id: 69,
		title: "Q69.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 70,
		title: "Q70. How do you use a `MaterialTheme` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `MaterialTheme.applyTo(this)`",
			"2. `val theme = MaterialTheme() <br> theme.applyTo(this)`",
			"3. `MaterialTheme { <br> // Composable content <br> }`",
			"4. `setTheme(MaterialTheme)`",
		],
		answer: "3. `MaterialTheme { <br> // Composable content <br> }`",
	},
	{
		id: 71,
		title: "Q71. What is the purpose of the `@Preview` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a composable.",
			"2. It defines a preview of a composable in the layout editor.",
			"3. It creates a preview of a composable in the Android Studio preview pane.",
			"4. Both 2 and 3.",
		],
		answer: "4. Both 2 and 3.",
	},
	{
		id: 72,
		title: "Q72. How do you create a simple `LazyRow` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> // View for item <br> } <br> }`",
			"3. `val lazyRow = LazyRow() <br> lazyRow.adapter = // Adapter with items <br>`",
			"4. `val lazyRow = LazyRow(items) { item -> <br> // Composable for item <br> }`",
		],
		answer: "1. `LazyRow { <br> items(items) { item -> <br> // Composable for item <br> } <br> }`",
	},
	{
		id: 73,
		title: "Q73. How do you create a simple `Card` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Card { <br> // Composable content <br> }`",
			"2. `val card = Card() <br> card.addView(// Composable content)`",
			"3. `Card.setContent { <br> // Composable content <br> }`",
			"4. `val card = Card(content = { <br> // Composable content <br> })`",
		],
		answer: "1. `Card { <br> // Composable content <br> }`",
	},
	{
		id: 74,
		title: "Q74. What is the difference between `remember` and `mutableStateOf` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
			"2. `mutableStateOf` is used for storing values, while `remember` is used for defining state variables.",
			"3. `remember` and `mutableStateOf` are interchangeable.",
			"4. `remember` is used for creating composables, while `mutableStateOf` is used for updating composables.",
		],
		answer: "1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
	},
	{
		id: 75,
		title: "Q75. What is the purpose of the `LaunchedEffect` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To perform side effects, like network calls or database updates, within a composable.",
			"2. To define animations and transitions in a composable.",
			"3. To create a preview of a composable in the Android Studio preview pane.",
			"4. To handle user interactions with a composable.",
		],
		answer: "1. To perform side effects, like network calls or database updates, within a composable.",
	},
	{
		id: 76,
		title: "Q76. How do you create a simple `Image` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `ImageView image = new ImageView(context)`",
			'2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
			"3. `Image.setImageResource(// Drawable resource)`",
			'4. `val image = ImageView(// Drawable resource, contentDescription = "Image description")`',
		],
		answer: '2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
	},
	{
		id: 77,
		title: "Q77.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 78,
		title: "Q78.  How do you define a property that can only be changed within the class itself (private setter) in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			'1. `var name: String = "John"`',
			'2. `val name: String = "John"`',
			'3. `private val name: String = "John"`',
			'4. `var name: String = "John" private set` ',
		],
		answer: '4. `var name: String = "John" private set` ',
	},
	{
		id: 79,
		title: "Q79. What is the difference between `remember` and `mutableStateOf` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
			"2. `mutableStateOf` is used for storing values, while `remember` is used for defining state variables.",
			"3. `remember` and `mutableStateOf` are interchangeable.",
			"4. `remember` is used for creating composables, while `mutableStateOf` is used for updating composables.",
		],
		answer: "1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
	},
	{
		id: 80,
		title: "Q80. How do you create a simple `Scaffold` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Scaffold { <br> // Composable content <br> }`",
			"2. `val scaffold = Scaffold() <br> scaffold.setContent { <br> // Composable content <br> }`",
			"3. `Scaffold.setContent { <br> // Composable content <br> }`",
			"4. `val scaffold = Scaffold(content = { <br> // Composable content <br> })`",
		],
		answer: "1. `Scaffold { <br> // Composable content <br> }`",
	},
	{
		id: 81,
		title: "Q81. How do you handle user input in a `TextField` in Jetpack Compose?",
		text: undefined,
		code2: 'val textState = state { ""}',
		choices: [
			"1. `TextField(value = textState, onTextChanged = { newText -> textState = newText })`",
			"2. `TextField(value = textState, onValueChange = { newText -> textState = newText })`",
			"3. `TextField(value = textState, onTextChange = { newText -> textState.value = newText })`",
			"4. `TextField(value = textState, onValueChange = { newText -> textState.update { newText } })`",
		],
		answer: "4. `TextField(value = textState, onValueChange = { newText -> textState.update { newText } })`",
	},
	{
		id: 82,
		title: "Q82. How do you use a `LazyColumn` to display a list of data in Jetpack Compose?",
		text: undefined,
		code2: 'val items = listOf("Item 1", "Item 2", "Item 3")',
		choices: [
			"1. `LazyColumn { <br> items(items) { item -> <br> Text(item) <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> TextView(item) <br> } <br> }`",
			"3. `val lazyColumn = LazyColumn() <br> lazyColumn.adapter = // Adapter with items <br>`",
			"4. `val lazyColumn = LazyColumn(items) { item -> <br> Text(item) <br> }`",
		],
		answer: "1. `LazyColumn { <br> items(items) { item -> <br> Text(item) <br> } <br> }`",
	},
	{
		id: 83,
		title: "Q83. What is the purpose of the `LaunchedEffect` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To perform side effects, like network calls or database updates, within a composable.",
			"2. To define animations and transitions in a composable.",
			"3. To create a preview of a composable in the Android Studio preview pane.",
			"4. To handle user interactions with a composable.",
		],
		answer: "1. To perform side effects, like network calls or database updates, within a composable.",
	},
	{
		id: 84,
		title: "Q84. How do you create a simple `Image` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `ImageView image = new ImageView(context)`",
			'2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
			"3. `Image.setImageResource(// Drawable resource)`",
			'4. `val image = ImageView(// Drawable resource, contentDescription = "Image description")`',
		],
		answer: '2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
	},
	{
		id: 85,
		title: "Q85. How do you create a simple `Card` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Card { <br> // Composable content <br> }`",
			"2. `val card = Card() <br> card.addView(// Composable content)`",
			"3. `Card.setContent { <br> // Composable content <br> }`",
			"4. `val card = Card(content = { <br> // Composable content <br> })`",
		],
		answer: "1. `Card { <br> // Composable content <br> }`",
	},
	{
		id: 86,
		title: "Q86. What is the difference between `remember` and `mutableStateOf` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
			"2. `mutableStateOf` is used for storing values, while `remember` is used for defining state variables.",
			"3. `remember` and `mutableStateOf` are interchangeable.",
			"4. `remember` is used for creating composables, while `mutableStateOf` is used for updating composables.",
		],
		answer: "1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
	},
	{
		id: 87,
		title: "Q87. What is the purpose of the `LaunchedEffect` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. To perform side effects, like network calls or database updates, within a composable.",
			"2. To define animations and transitions in a composable.",
			"3. To create a preview of a composable in the Android Studio preview pane.",
			"4. To handle user interactions with a composable.",
		],
		answer: "1. To perform side effects, like network calls or database updates, within a composable.",
	},
	{
		id: 88,
		title: "Q88. How do you create a simple `Image` composable in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `ImageView image = new ImageView(context)`",
			'2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
			"3. `Image.setImageResource(// Drawable resource)`",
			'4. `val image = ImageView(// Drawable resource, contentDescription = "Image description")`',
		],
		answer: '2. `val image = Image(painter = // Painter resource, contentDescription = "Image description")`',
	},
	{
		id: 89,
		title: "Q89. How do you create a simple `Scaffold` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `Scaffold { <br> // Composable content <br> }`",
			"2. `val scaffold = Scaffold() <br> scaffold.setContent { <br> // Composable content <br> }`",
			"3. `Scaffold.setContent { <br> // Composable content <br> }`",
			"4. `val scaffold = Scaffold(content = { <br> // Composable content <br> })`",
		],
		answer: "1. `Scaffold { <br> // Composable content <br> }`",
	},
	{
		id: 90,
		title: "Q90. How do you handle user input in a `TextField` in Jetpack Compose?",
		text: undefined,
		code2: 'val textState = state { ""}',
		choices: [
			"1. `TextField(value = textState, onTextChanged = { newText -> textState = newText })`",
			"2. `TextField(value = textState, onValueChange = { newText -> textState = newText })`",
			"3. `TextField(value = textState, onTextChange = { newText -> textState.value = newText })`",
			"4. `TextField(value = textState, onValueChange = { newText -> textState.update { newText } })`",
		],
		answer: "4. `TextField(value = textState, onValueChange = { newText -> textState.update { newText } })`",
	},
	{
		id: 91,
		title: "Q91. How do you use a `LazyColumn` to display a list of data in Jetpack Compose?",
		text: undefined,
		code2: 'val items = listOf("Item 1", "Item 2", "Item 3")',
		choices: [
			"1. `LazyColumn { <br> items(items) { item -> <br> Text(item) <br> } <br> }`",
			"2. `RecyclerView.lazy { <br> items(items) { item -> <br> TextView(item) <br> } <br> }`",
			"3. `val lazyColumn = LazyColumn() <br> lazyColumn.adapter = // Adapter with items <br>`",
			"4. `val lazyColumn = LazyColumn(items) { item -> <br> Text(item) <br> }`",
		],
		answer: "1. `LazyColumn { <br> items(items) { item -> <br> Text(item) <br> } <br> }`",
	},
	{
		id: 92,
		title: "Q92.  What is the difference between a `val` and a `var` property in Kotlin?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `val` is immutable, `var` is mutable.",
			"2. `val` must be initialized immediately, `var` can be initialized later.",
			"3. `val` can be accessed from anywhere, `var` can only be accessed within the class.",
			"4. There is no difference; they are interchangeable.",
		],
		answer: "1. `val` is immutable, `var` is mutable.",
	},
	{
		id: 93,
		title: "Q93. What is the purpose of the `@Composable` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a view.",
			"2. It marks a function as a layout.",
			"3. It marks a function as a composable function.",
			"4. It marks a function as a state-holding function.",
		],
		answer: "3. It marks a function as a composable function.",
	},
	{
		id: 94,
		title: "Q94. What is the difference between `remember` and `mutableStateOf` in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
			"2. `mutableStateOf` is used for storing values, while `remember` is used for defining state variables.",
			"3. `remember` and `mutableStateOf` are interchangeable.",
			"4. `remember` is used for creating composables, while `mutableStateOf` is used for updating composables.",
		],
		answer: "1. `remember` is used for storing values, while `mutableStateOf` is used for defining state variables.",
	},
	{
		id: 95,
		title: "Q95. What is the purpose of the `@Preview` annotation in Jetpack Compose?",
		text: undefined,
		code2: undefined,
		choices: [
			"1. It marks a function as a composable.",
			"2. It defines a preview of a composable in the layout editor.",
			"3. It creates a preview of a composable in the Android Studio preview pane.",
			"4. Both 2 and 3.",
		],
		answer: "4. Both 2 and 3.",
	},
];

// let cppq1 = cpp[Math.floor(Math.random())* cpp.length+9];
// // console.log(cppq1);

// chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
// 	if (request.message === "getRandomQuestion") {
// 		const randomQuestion = cpp[Math.floor(Math.random()) * cpp.length ];

// 		sendResponse([randomQuestion]);
// 		console.log("Sending response for question:", randomQuestion);
// 	}
// });

// chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
// 	if (request.message === "getRandomQuestion") {
// 		console.log("Received getRandomQuestion message");

// 		let millisecs = Date.now();
// 		console.log(millisecs);

// 		if (millisecs % 6 == 0 || millisecs % 7 == 0) {
// 			const randomQuestion = cpp[Math.floor(Math.random() * cpp.length)];

// 			console.log("Sending response for question:", randomQuestion);
// 			sendResponse([randomQuestion]);
// 		}

// 		if (millisecs % 8 == 0 || millisecs % 9 == 0) {
// 			const randomQuestion = dsa3[Math.floor(Math.random() * cpp.length)];

// 			console.log("Sending response for question:", randomQuestion);
// 			sendResponse([randomQuestion]);
// 		}

// 		if (millisecs % 2 == 1 || millisecs % 3 == 3 || millisecs % 3 == 0) {
// 			const randomQuestion = ds[Math.floor(Math.random() * cpp.length)];

// 			console.log("Sending response for question:", randomQuestion);
// 			sendResponse([randomQuestion]);
// 		} else {
// 			const randomQuestion = cpp[Math.floor(Math.random() * cpp.length)];

// 			console.log("Sending response for question:", randomQuestion);
// 			sendResponse([randomQuestion]);
// 		}
// 	}
// });

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
	if (request.message === "getRandomQuestion") {
		console.log("Received getRandomQuestion message");
		const randomQuestion =
			kotlin1[Math.floor(Math.random() * kotlin1.length)];
		console.log("Sending response for question:", randomQuestion);
		sendResponse([randomQuestion]);
	}
});
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
	if (request.type === "change_quiz") {
		chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
			chrome.tabs.sendMessage(tabs[0].id, request, (response) => {
				sendResponse(response);
			});
		});
		return true; // Keep the message channel open for sendResponse
	}
});
